// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SmartView.UIModule.PQA.Report.InspectionSummaryReportClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class InspectionSummaryReport
    {
        
        #region Properties
        public UISmartViewProductionQWindow UISmartViewProductionQWindow
        {
            get
            {
                if ((this.mUISmartViewProductionQWindow == null))
                {
                    this.mUISmartViewProductionQWindow = new UISmartViewProductionQWindow();
                }
                return this.mUISmartViewProductionQWindow;
            }
        }
        
        public UIReportBrowserWindow UIReportBrowserWindow
        {
            get
            {
                if ((this.mUIReportBrowserWindow == null))
                {
                    this.mUIReportBrowserWindow = new UIReportBrowserWindow();
                }
                return this.mUIReportBrowserWindow;
            }
        }
        
        public UIExportreportWindow UIExportreportWindow
        {
            get
            {
                if ((this.mUIExportreportWindow == null))
                {
                    this.mUIExportreportWindow = new UIExportreportWindow();
                }
                return this.mUIExportreportWindow;
            }
        }
        
        public UIOpenwithWindow UIOpenwithWindow
        {
            get
            {
                if ((this.mUIOpenwithWindow == null))
                {
                    this.mUIOpenwithWindow = new UIOpenwithWindow();
                }
                return this.mUIOpenwithWindow;
            }
        }
        
        public UIInspectionSummaryWindow1 UIInspectionSummaryWindow
        {
            get
            {
                if ((this.mUIInspectionSummaryWindow == null))
                {
                    this.mUIInspectionSummaryWindow = new UIInspectionSummaryWindow1();
                }
                return this.mUIInspectionSummaryWindow;
            }
        }
        
        public UISaveWindow2 UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow2();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UICustomTextWindow UICustomTextWindow
        {
            get
            {
                if ((this.mUICustomTextWindow == null))
                {
                    this.mUICustomTextWindow = new UICustomTextWindow();
                }
                return this.mUICustomTextWindow;
            }
        }
        
        public UISaveCustomReportWindow UISaveCustomReportWindow
        {
            get
            {
                if ((this.mUISaveCustomReportWindow == null))
                {
                    this.mUISaveCustomReportWindow = new UISaveCustomReportWindow();
                }
                return this.mUISaveCustomReportWindow;
            }
        }
        
        public UIRevertsettingsWindow UIRevertsettingsWindow
        {
            get
            {
                if ((this.mUIRevertsettingsWindow == null))
                {
                    this.mUIRevertsettingsWindow = new UIRevertsettingsWindow();
                }
                return this.mUIRevertsettingsWindow;
            }
        }
        
        public UIRichTextParseErrorWindow UIRichTextParseErrorWindow
        {
            get
            {
                if ((this.mUIRichTextParseErrorWindow == null))
                {
                    this.mUIRichTextParseErrorWindow = new UIRichTextParseErrorWindow();
                }
                return this.mUIRichTextParseErrorWindow;
            }
        }
        
        public UIPagerenderingcrashWindow UIPagerenderingcrashWindow
        {
            get
            {
                if ((this.mUIPagerenderingcrashWindow == null))
                {
                    this.mUIPagerenderingcrashWindow = new UIPagerenderingcrashWindow();
                }
                return this.mUIPagerenderingcrashWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIConfirmationWindow UIConfirmationWindow
        {
            get
            {
                if ((this.mUIConfirmationWindow == null))
                {
                    this.mUIConfirmationWindow = new UIConfirmationWindow();
                }
                return this.mUIConfirmationWindow;
            }
        }
        
        public UIProductionQualityAdvWindow UIProductionQualityAdvWindow
        {
            get
            {
                if ((this.mUIProductionQualityAdvWindow == null))
                {
                    this.mUIProductionQualityAdvWindow = new UIProductionQualityAdvWindow();
                }
                return this.mUIProductionQualityAdvWindow;
            }
        }
        
        public UIRunningapplicationsWindow UIRunningapplicationsWindow
        {
            get
            {
                if ((this.mUIRunningapplicationsWindow == null))
                {
                    this.mUIRunningapplicationsWindow = new UIRunningapplicationsWindow();
                }
                return this.mUIRunningapplicationsWindow;
            }
        }
        
        public UIJumpListWindow UIJumpListWindow
        {
            get
            {
                if ((this.mUIJumpListWindow == null))
                {
                    this.mUIJumpListWindow = new UIJumpListWindow();
                }
                return this.mUIJumpListWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISmartViewProductionQWindow mUISmartViewProductionQWindow;
        
        private UIReportBrowserWindow mUIReportBrowserWindow;
        
        private UIExportreportWindow mUIExportreportWindow;
        
        private UIOpenwithWindow mUIOpenwithWindow;
        
        private UIInspectionSummaryWindow1 mUIInspectionSummaryWindow;
        
        private UISaveWindow2 mUISaveWindow;
        
        private UICustomTextWindow mUICustomTextWindow;
        
        private UISaveCustomReportWindow mUISaveCustomReportWindow;
        
        private UIRevertsettingsWindow mUIRevertsettingsWindow;
        
        private UIRichTextParseErrorWindow mUIRichTextParseErrorWindow;
        
        private UIPagerenderingcrashWindow mUIPagerenderingcrashWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIConfirmationWindow mUIConfirmationWindow;
        
        private UIProductionQualityAdvWindow mUIProductionQualityAdvWindow;
        
        private UIRunningapplicationsWindow mUIRunningapplicationsWindow;
        
        private UIJumpListWindow mUIJumpListWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISmartViewProductionQWindow : WinWindow
    {
        
        public UISmartViewProductionQWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SmartView Production Quality Advisor";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public UIToolbarMainWindow UIToolbarMainWindow
        {
            get
            {
                if ((this.mUIToolbarMainWindow == null))
                {
                    this.mUIToolbarMainWindow = new UIToolbarMainWindow(this);
                }
                return this.mUIToolbarMainWindow;
            }
        }
        
        public UIInspectionSummaryWindow UIInspectionSummaryWindow
        {
            get
            {
                if ((this.mUIInspectionSummaryWindow == null))
                {
                    this.mUIInspectionSummaryWindow = new UIInspectionSummaryWindow(this);
                }
                return this.mUIInspectionSummaryWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIToolbarMainWindow mUIToolbarMainWindow;
        
        private UIInspectionSummaryWindow mUIInspectionSummaryWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIToolbarMainWindow : WinWindow
    {
        
        public UIToolbarMainWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolbarMain";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinButton UIReportsButton
        {
            get
            {
                if ((this.mUIReportsButton == null))
                {
                    this.mUIReportsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIReportsButton.SearchProperties[WinButton.PropertyNames.Name] = "Reports";
                    this.mUIReportsButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIReportsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIReportsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInspectionSummaryWindow : WinWindow
    {
        
        public UIInspectionSummaryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "PqaFormDataSelect";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIInspectionSummaryTitleBar
        {
            get
            {
                if ((this.mUIInspectionSummaryTitleBar == null))
                {
                    this.mUIInspectionSummaryTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIInspectionSummaryTitleBar.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIInspectionSummaryTitleBar;
            }
        }
        
        public UIPanelReportWindow UIPanelReportWindow
        {
            get
            {
                if ((this.mUIPanelReportWindow == null))
                {
                    this.mUIPanelReportWindow = new UIPanelReportWindow(this);
                }
                return this.mUIPanelReportWindow;
            }
        }
        
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIPanelPreviewWindow UIPanelPreviewWindow
        {
            get
            {
                if ((this.mUIPanelPreviewWindow == null))
                {
                    this.mUIPanelPreviewWindow = new UIPanelPreviewWindow(this);
                }
                return this.mUIPanelPreviewWindow;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public UIToolBarPreviewWindow UIToolBarPreviewWindow
        {
            get
            {
                if ((this.mUIToolBarPreviewWindow == null))
                {
                    this.mUIToolBarPreviewWindow = new UIToolBarPreviewWindow(this);
                }
                return this.mUIToolBarPreviewWindow;
            }
        }
        
        public UIComboBookmarksWindow UIComboBookmarksWindow
        {
            get
            {
                if ((this.mUIComboBookmarksWindow == null))
                {
                    this.mUIComboBookmarksWindow = new UIComboBookmarksWindow(this);
                }
                return this.mUIComboBookmarksWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIInspectionSummaryTitleBar;
        
        private UIPanelReportWindow mUIPanelReportWindow;
        
        private UIItem0Window mUIItem0Window;
        
        private UIPanelPreviewWindow mUIPanelPreviewWindow;
        
        private WinButton mUICloseButton;
        
        private UIToolBarPreviewWindow mUIToolBarPreviewWindow;
        
        private UIComboBookmarksWindow mUIComboBookmarksWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelReportWindow : WinWindow
    {
        
        public UIPanelReportWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelReport";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinClient UIPanelReportClient
        {
            get
            {
                if ((this.mUIPanelReportClient == null))
                {
                    this.mUIPanelReportClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanelReportClient.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIPanelReportClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanelReportClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textValue";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextValueEdit
        {
            get
            {
                if ((this.mUITextValueEdit == null))
                {
                    this.mUITextValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "2";
                    this.mUITextValueEdit.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUITextValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelPreviewWindow : WinWindow
    {
        
        public UIPanelPreviewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelPreview";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinWindow UIToolBarPreviewWindow
        {
            get
            {
                if ((this.mUIToolBarPreviewWindow == null))
                {
                    this.mUIToolBarPreviewWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIToolBarPreviewWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.ToolbarWindow32", PropertyExpressionOperator.Contains));
                    this.mUIToolBarPreviewWindow.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIToolBarPreviewWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIToolBarPreviewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIToolBarPreviewWindow : WinWindow
    {
        
        public UIToolBarPreviewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolBarPreview";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinButton UIExcelWorkbookButton
        {
            get
            {
                if ((this.mUIExcelWorkbookButton == null))
                {
                    this.mUIExcelWorkbookButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExcelWorkbookButton.SearchProperties[WinButton.PropertyNames.Name] = "Excel Workbook";
                    this.mUIExcelWorkbookButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIExcelWorkbookButton;
            }
        }
        
        public WinButton UIWizardButton
        {
            get
            {
                if ((this.mUIWizardButton == null))
                {
                    this.mUIWizardButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIWizardButton.SearchProperties[WinButton.PropertyNames.Name] = "Wizard";
                    this.mUIWizardButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIWizardButton;
            }
        }
        
        public WinButton UIPinreportButton
        {
            get
            {
                if ((this.mUIPinreportButton == null))
                {
                    this.mUIPinreportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPinreportButton.SearchProperties[WinButton.PropertyNames.Name] = "Pin report";
                    this.mUIPinreportButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIPinreportButton;
            }
        }
        
        public WinButton UIRunreportButton
        {
            get
            {
                if ((this.mUIRunreportButton == null))
                {
                    this.mUIRunreportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRunreportButton.SearchProperties[WinButton.PropertyNames.Name] = "Run report";
                    this.mUIRunreportButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIRunreportButton;
            }
        }
        
        public WinButton UIPageSetupButton
        {
            get
            {
                if ((this.mUIPageSetupButton == null))
                {
                    this.mUIPageSetupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPageSetupButton.SearchProperties[WinButton.PropertyNames.Name] = "Page Setup...";
                    this.mUIPageSetupButton.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIPageSetupButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExcelWorkbookButton;
        
        private WinButton mUIWizardButton;
        
        private WinButton mUIPinreportButton;
        
        private WinButton mUIRunreportButton;
        
        private WinButton mUIPageSetupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIComboBookmarksWindow : WinWindow
    {
        
        public UIComboBookmarksWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBookmarks";
            this.WindowTitles.Add("SmartView Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBookmarksComboBox
        {
            get
            {
                if ((this.mUIComboBookmarksComboBox == null))
                {
                    this.mUIComboBookmarksComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboBookmarksComboBox.WindowTitles.Add("SmartView Production Quality Advisor");
                    #endregion
                }
                return this.mUIComboBookmarksComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBookmarksComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIReportBrowserWindow : WinWindow
    {
        
        public UIReportBrowserWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Report Browser";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Report Browser");
            #endregion
        }
        
        #region Properties
        public UIListReportsWindow UIListReportsWindow
        {
            get
            {
                if ((this.mUIListReportsWindow == null))
                {
                    this.mUIListReportsWindow = new UIListReportsWindow(this);
                }
                return this.mUIListReportsWindow;
            }
        }
        
        public UIPreviewWindow UIPreviewWindow
        {
            get
            {
                if ((this.mUIPreviewWindow == null))
                {
                    this.mUIPreviewWindow = new UIPreviewWindow(this);
                }
                return this.mUIPreviewWindow;
            }
        }
        
        public UITabReportWindow UITabReportWindow
        {
            get
            {
                if ((this.mUITabReportWindow == null))
                {
                    this.mUITabReportWindow = new UITabReportWindow(this);
                }
                return this.mUITabReportWindow;
            }
        }
        
        public UIListSettingsWindow UIListSettingsWindow
        {
            get
            {
                if ((this.mUIListSettingsWindow == null))
                {
                    this.mUIListSettingsWindow = new UIListSettingsWindow(this);
                }
                return this.mUIListSettingsWindow;
            }
        }
        
        public UIReportBrowserTitleBar UIReportBrowserTitleBar
        {
            get
            {
                if ((this.mUIReportBrowserTitleBar == null))
                {
                    this.mUIReportBrowserTitleBar = new UIReportBrowserTitleBar(this);
                }
                return this.mUIReportBrowserTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIListReportsWindow mUIListReportsWindow;
        
        private UIPreviewWindow mUIPreviewWindow;
        
        private UITabReportWindow mUITabReportWindow;
        
        private UIListSettingsWindow mUIListSettingsWindow;
        
        private UIReportBrowserTitleBar mUIReportBrowserTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIListReportsWindow : WinWindow
    {
        
        public UIListReportsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listReports";
            this.WindowTitles.Add("Report Browser");
            #endregion
        }
        
        #region Properties
        public WinList UIListReportsList
        {
            get
            {
                if ((this.mUIListReportsList == null))
                {
                    this.mUIListReportsList = new WinList(this);
                    #region Search Criteria
                    this.mUIListReportsList.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUIListReportsList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListReportsList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPreviewWindow : WinWindow
    {
        
        public UIPreviewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonPreview";
            this.WindowTitles.Add("Report Browser");
            #endregion
        }
        
        #region Properties
        public WinButton UIPreviewButton
        {
            get
            {
                if ((this.mUIPreviewButton == null))
                {
                    this.mUIPreviewButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPreviewButton.SearchProperties[WinButton.PropertyNames.Name] = "Preview";
                    this.mUIPreviewButton.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUIPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITabReportWindow : WinWindow
    {
        
        public UITabReportWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabReport";
            this.WindowTitles.Add("Report Browser");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIStandardTabPage
        {
            get
            {
                if ((this.mUIStandardTabPage == null))
                {
                    this.mUIStandardTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIStandardTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Standard";
                    this.mUIStandardTabPage.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUIStandardTabPage;
            }
        }
        
        public WinTabPage UICustomTabPage
        {
            get
            {
                if ((this.mUICustomTabPage == null))
                {
                    this.mUICustomTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUICustomTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Custom";
                    this.mUICustomTabPage.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUICustomTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIStandardTabPage;
        
        private WinTabPage mUICustomTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIListSettingsWindow : WinWindow
    {
        
        public UIListSettingsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listSettings";
            this.WindowTitles.Add("Report Browser");
            #endregion
        }
        
        #region Properties
        public WinList UIListSettingsList
        {
            get
            {
                if ((this.mUIListSettingsList == null))
                {
                    this.mUIListSettingsList = new WinList(this);
                    #region Search Criteria
                    this.mUIListSettingsList.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUIListSettingsList;
            }
        }
        
        public WinListItem UICustomReport12581859ListItem
        {
            get
            {
                if ((this.mUICustomReport12581859ListItem == null))
                {
                    this.mUICustomReport12581859ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICustomReport12581859ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CustomReport1258185979169834755258952177116602418551837247917490180841506564724";
                    this.mUICustomReport12581859ListItem.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUICustomReport12581859ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListSettingsList;
        
        private WinListItem mUICustomReport12581859ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIReportBrowserTitleBar : WinTitleBar
    {
        
        public UIReportBrowserTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Report Browser");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Report Browser");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExportreportWindow : WinWindow
    {
        
        public UIExportreportWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Export report";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Export report");
            #endregion
        }
        
        #region Properties
        public UIFolderViewList UIFolderViewList
        {
            get
            {
                if ((this.mUIFolderViewList == null))
                {
                    this.mUIFolderViewList = new UIFolderViewList(this);
                }
                return this.mUIFolderViewList;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewList mUIFolderViewList;
        
        private UIItemWindow mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewList : WinList
    {
        
        public UIFolderViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Folder View";
            this.WindowTitles.Add("Export report");
            #endregion
        }
        
        #region Properties
        public WinListItem UICapturedImageListItem
        {
            get
            {
                if ((this.mUICapturedImageListItem == null))
                {
                    this.mUICapturedImageListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICapturedImageListItem.SearchProperties[WinListItem.PropertyNames.Name] = "CapturedImage";
                    this.mUICapturedImageListItem.WindowTitles.Add("Export report");
                    #endregion
                }
                return this.mUICapturedImageListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUICapturedImageListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Export report");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Export report");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Export report");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Export report");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenwithWindow : WinWindow
    {
        
        public UIOpenwithWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open with";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open with");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open with");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open with");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInspectionSummaryWindow1 : WinWindow
    {
        
        public UIInspectionSummaryWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Inspection Summary";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public UIDefectclassesWindow UIDefectclassesWindow
        {
            get
            {
                if ((this.mUIDefectclassesWindow == null))
                {
                    this.mUIDefectclassesWindow = new UIDefectclassesWindow(this);
                }
                return this.mUIDefectclassesWindow;
            }
        }
        
        public UISeverityWindow UISeverityWindow
        {
            get
            {
                if ((this.mUISeverityWindow == null))
                {
                    this.mUISeverityWindow = new UISeverityWindow(this);
                }
                return this.mUISeverityWindow;
            }
        }
        
        public UIItem0Window1 UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window1(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIPreviewWindow1 UIPreviewWindow
        {
            get
            {
                if ((this.mUIPreviewWindow == null))
                {
                    this.mUIPreviewWindow = new UIPreviewWindow1(this);
                }
                return this.mUIPreviewWindow;
            }
        }
        
        public UIBtnSaveWindow UIBtnSaveWindow
        {
            get
            {
                if ((this.mUIBtnSaveWindow == null))
                {
                    this.mUIBtnSaveWindow = new UIBtnSaveWindow(this);
                }
                return this.mUIBtnSaveWindow;
            }
        }
        
        public UIFinishWindow UIFinishWindow
        {
            get
            {
                if ((this.mUIFinishWindow == null))
                {
                    this.mUIFinishWindow = new UIFinishWindow(this);
                }
                return this.mUIFinishWindow;
            }
        }
        
        public UITabWindow UITabWindow
        {
            get
            {
                if ((this.mUITabWindow == null))
                {
                    this.mUITabWindow = new UITabWindow(this);
                }
                return this.mUITabWindow;
            }
        }
        
        public UIDisplaynullcountsWindow UIDisplaynullcountsWindow
        {
            get
            {
                if ((this.mUIDisplaynullcountsWindow == null))
                {
                    this.mUIDisplaynullcountsWindow = new UIDisplaynullcountsWindow(this);
                }
                return this.mUIDisplaynullcountsWindow;
            }
        }
        
        public UIShowcustomtextWindow UIShowcustomtextWindow
        {
            get
            {
                if ((this.mUIShowcustomtextWindow == null))
                {
                    this.mUIShowcustomtextWindow = new UIShowcustomtextWindow(this);
                }
                return this.mUIShowcustomtextWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIComboPageWindow UIComboPageWindow
        {
            get
            {
                if ((this.mUIComboPageWindow == null))
                {
                    this.mUIComboPageWindow = new UIComboPageWindow(this);
                }
                return this.mUIComboPageWindow;
            }
        }
        
        public UILineWindow UILineWindow
        {
            get
            {
                if ((this.mUILineWindow == null))
                {
                    this.mUILineWindow = new UILineWindow(this);
                }
                return this.mUILineWindow;
            }
        }
        
        public UILegendWindow UILegendWindow
        {
            get
            {
                if ((this.mUILegendWindow == null))
                {
                    this.mUILegendWindow = new UILegendWindow(this);
                }
                return this.mUILegendWindow;
            }
        }
        
        public UILogarithmicscaleWindow UILogarithmicscaleWindow
        {
            get
            {
                if ((this.mUILogarithmicscaleWindow == null))
                {
                    this.mUILogarithmicscaleWindow = new UILogarithmicscaleWindow(this);
                }
                return this.mUILogarithmicscaleWindow;
            }
        }
        
        public UISaveWindow1 UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow1(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIInspectionSummaryTitleBar UIInspectionSummaryTitleBar
        {
            get
            {
                if ((this.mUIInspectionSummaryTitleBar == null))
                {
                    this.mUIInspectionSummaryTitleBar = new UIInspectionSummaryTitleBar(this);
                }
                return this.mUIInspectionSummaryTitleBar;
            }
        }
        
        public UIBtnUndoWindow UIBtnUndoWindow
        {
            get
            {
                if ((this.mUIBtnUndoWindow == null))
                {
                    this.mUIBtnUndoWindow = new UIBtnUndoWindow(this);
                }
                return this.mUIBtnUndoWindow;
            }
        }
        
        public UICustomunitsWindow UICustomunitsWindow
        {
            get
            {
                if ((this.mUICustomunitsWindow == null))
                {
                    this.mUICustomunitsWindow = new UICustomunitsWindow(this);
                }
                return this.mUICustomunitsWindow;
            }
        }
        
        public UIShowheaderWindow UIShowheaderWindow
        {
            get
            {
                if ((this.mUIShowheaderWindow == null))
                {
                    this.mUIShowheaderWindow = new UIShowheaderWindow(this);
                }
                return this.mUIShowheaderWindow;
            }
        }
        
        public UIShowgraphWindow UIShowgraphWindow
        {
            get
            {
                if ((this.mUIShowgraphWindow == null))
                {
                    this.mUIShowgraphWindow = new UIShowgraphWindow(this);
                }
                return this.mUIShowgraphWindow;
            }
        }
        
        public UIGroupbyviewWindow UIGroupbyviewWindow
        {
            get
            {
                if ((this.mUIGroupbyviewWindow == null))
                {
                    this.mUIGroupbyviewWindow = new UIGroupbyviewWindow(this);
                }
                return this.mUIGroupbyviewWindow;
            }
        }
        
        public UIShowclasslabelsWindow UIShowclasslabelsWindow
        {
            get
            {
                if ((this.mUIShowclasslabelsWindow == null))
                {
                    this.mUIShowclasslabelsWindow = new UIShowclasslabelsWindow(this);
                }
                return this.mUIShowclasslabelsWindow;
            }
        }
        
        public UITextLimitsWindow UITextLimitsWindow
        {
            get
            {
                if ((this.mUITextLimitsWindow == null))
                {
                    this.mUITextLimitsWindow = new UITextLimitsWindow(this);
                }
                return this.mUITextLimitsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDefectclassesWindow mUIDefectclassesWindow;
        
        private UISeverityWindow mUISeverityWindow;
        
        private UIItem0Window1 mUIItem0Window;
        
        private UIPreviewWindow1 mUIPreviewWindow;
        
        private UIBtnSaveWindow mUIBtnSaveWindow;
        
        private UIFinishWindow mUIFinishWindow;
        
        private UITabWindow mUITabWindow;
        
        private UIDisplaynullcountsWindow mUIDisplaynullcountsWindow;
        
        private UIShowcustomtextWindow mUIShowcustomtextWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIComboPageWindow mUIComboPageWindow;
        
        private UILineWindow mUILineWindow;
        
        private UILegendWindow mUILegendWindow;
        
        private UILogarithmicscaleWindow mUILogarithmicscaleWindow;
        
        private UISaveWindow1 mUISaveWindow;
        
        private UIInspectionSummaryTitleBar mUIInspectionSummaryTitleBar;
        
        private UIBtnUndoWindow mUIBtnUndoWindow;
        
        private UICustomunitsWindow mUICustomunitsWindow;
        
        private UIShowheaderWindow mUIShowheaderWindow;
        
        private UIShowgraphWindow mUIShowgraphWindow;
        
        private UIGroupbyviewWindow mUIGroupbyviewWindow;
        
        private UIShowclasslabelsWindow mUIShowclasslabelsWindow;
        
        private UITextLimitsWindow mUITextLimitsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectclassesWindow : WinWindow
    {
        
        public UIDefectclassesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "groupClasses";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public UIDefectclassesClient UIDefectclassesClient
        {
            get
            {
                if ((this.mUIDefectclassesClient == null))
                {
                    this.mUIDefectclassesClient = new UIDefectclassesClient(this);
                }
                return this.mUIDefectclassesClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDefectclassesClient mUIDefectclassesClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectclassesClient : WinClient
    {
        
        public UIDefectclassesClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Defect classes";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDefectclassesCheckBox
        {
            get
            {
                if ((this.mUIDefectclassesCheckBox == null))
                {
                    this.mUIDefectclassesCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDefectclassesCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Defect classes";
                    this.mUIDefectclassesCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIDefectclassesCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDefectclassesCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISeverityWindow : WinWindow
    {
        
        public UISeverityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClassesSeverity";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UISeverityRadioButton
        {
            get
            {
                if ((this.mUISeverityRadioButton == null))
                {
                    this.mUISeverityRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISeverityRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Severity";
                    this.mUISeverityRadioButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUISeverityRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUISeverityRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem0Window1 : WinWindow
    {
        
        public UIItem0Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtClassesSeverity";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtClassesSeverityEdit
        {
            get
            {
                if ((this.mUITxtClassesSeverityEdit == null))
                {
                    this.mUITxtClassesSeverityEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtClassesSeverityEdit.SearchProperties[WinEdit.PropertyNames.Name] = "³";
                    this.mUITxtClassesSeverityEdit.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUITxtClassesSeverityEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtClassesSeverityEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPreviewWindow1 : WinWindow
    {
        
        public UIPreviewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPreview";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UIPreviewButton
        {
            get
            {
                if ((this.mUIPreviewButton == null))
                {
                    this.mUIPreviewButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPreviewButton.SearchProperties[WinButton.PropertyNames.Name] = "Preview";
                    this.mUIPreviewButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBtnSaveWindow : WinWindow
    {
        
        public UIBtnSaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSave";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnSaveButton
        {
            get
            {
                if ((this.mUIBtnSaveButton == null))
                {
                    this.mUIBtnSaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnSaveButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIBtnSaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnSaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFinishWindow : WinWindow
    {
        
        public UIFinishWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnFinish";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WinButton.PropertyNames.Name] = "Finish";
                    this.mUIFinishButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITabWindow : WinWindow
    {
        
        public UITabWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tab";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIReportOptionsTabPage
        {
            get
            {
                if ((this.mUIReportOptionsTabPage == null))
                {
                    this.mUIReportOptionsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIReportOptionsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Report Options";
                    this.mUIReportOptionsTabPage.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIReportOptionsTabPage;
            }
        }
        
        public WinTabPage UISectionFormattingTabPage
        {
            get
            {
                if ((this.mUISectionFormattingTabPage == null))
                {
                    this.mUISectionFormattingTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUISectionFormattingTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Section Formatting";
                    this.mUISectionFormattingTabPage.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUISectionFormattingTabPage;
            }
        }
        
        public WinTabPage UIDataQueryTabPage
        {
            get
            {
                if ((this.mUIDataQueryTabPage == null))
                {
                    this.mUIDataQueryTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIDataQueryTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Data Query";
                    this.mUIDataQueryTabPage.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIDataQueryTabPage;
            }
        }
        
        public WinTabPage UIDefectFiltersTabPage
        {
            get
            {
                if ((this.mUIDefectFiltersTabPage == null))
                {
                    this.mUIDefectFiltersTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIDefectFiltersTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Defect Filters";
                    this.mUIDefectFiltersTabPage.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIDefectFiltersTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIReportOptionsTabPage;
        
        private WinTabPage mUISectionFormattingTabPage;
        
        private WinTabPage mUIDataQueryTabPage;
        
        private WinTabPage mUIDefectFiltersTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDisplaynullcountsWindow : WinWindow
    {
        
        public UIDisplaynullcountsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDisplaynullcountsCheckBox
        {
            get
            {
                if ((this.mUIDisplaynullcountsCheckBox == null))
                {
                    this.mUIDisplaynullcountsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDisplaynullcountsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Display null counts";
                    this.mUIDisplaynullcountsCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIDisplaynullcountsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDisplaynullcountsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIShowcustomtextWindow : WinWindow
    {
        
        public UIShowcustomtextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkCaption";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIShowcustomtextCheckBox
        {
            get
            {
                if ((this.mUIShowcustomtextCheckBox == null))
                {
                    this.mUIShowcustomtextCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIShowcustomtextCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Show custom text";
                    this.mUIShowcustomtextCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIShowcustomtextCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIShowcustomtextCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPopup";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "...";
                    this.mUIItemButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIComboPageWindow : WinWindow
    {
        
        public UIComboPageWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboPage";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboPageComboBox
        {
            get
            {
                if ((this.mUIComboPageComboBox == null))
                {
                    this.mUIComboPageComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboPageComboBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIComboPageComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboPageComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILineWindow : WinWindow
    {
        
        public UILineWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnLines";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UILineRadioButton
        {
            get
            {
                if ((this.mUILineRadioButton == null))
                {
                    this.mUILineRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUILineRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Line";
                    this.mUILineRadioButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUILineRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUILineRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILegendWindow : WinWindow
    {
        
        public UILegendWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkLegend";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UILegendCheckBox
        {
            get
            {
                if ((this.mUILegendCheckBox == null))
                {
                    this.mUILegendCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUILegendCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Legend";
                    this.mUILegendCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUILegendCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUILegendCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILogarithmicscaleWindow : WinWindow
    {
        
        public UILogarithmicscaleWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkLogarithmic";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UILogarithmicscaleCheckBox
        {
            get
            {
                if ((this.mUILogarithmicscaleCheckBox == null))
                {
                    this.mUILogarithmicscaleCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUILogarithmicscaleCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Logarithmic scale";
                    this.mUILogarithmicscaleCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUILogarithmicscaleCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUILogarithmicscaleCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSave";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInspectionSummaryTitleBar : WinTitleBar
    {
        
        public UIInspectionSummaryTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBtnUndoWindow : WinWindow
    {
        
        public UIBtnUndoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUndo";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnUndoButton
        {
            get
            {
                if ((this.mUIBtnUndoButton == null))
                {
                    this.mUIBtnUndoButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnUndoButton.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIBtnUndoButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnUndoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICustomunitsWindow : WinWindow
    {
        
        public UICustomunitsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBoxUnits";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UICustomunitsCheckBox
        {
            get
            {
                if ((this.mUICustomunitsCheckBox == null))
                {
                    this.mUICustomunitsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUICustomunitsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Custom units";
                    this.mUICustomunitsCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUICustomunitsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUICustomunitsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIShowheaderWindow : WinWindow
    {
        
        public UIShowheaderWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIShowheaderCheckBox
        {
            get
            {
                if ((this.mUIShowheaderCheckBox == null))
                {
                    this.mUIShowheaderCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIShowheaderCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Show header";
                    this.mUIShowheaderCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIShowheaderCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIShowheaderCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIShowgraphWindow : WinWindow
    {
        
        public UIShowgraphWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIShowgraphCheckBox
        {
            get
            {
                if ((this.mUIShowgraphCheckBox == null))
                {
                    this.mUIShowgraphCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIShowgraphCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Show graph";
                    this.mUIShowgraphCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIShowgraphCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIShowgraphCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGroupbyviewWindow : WinWindow
    {
        
        public UIGroupbyviewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIGroupbyviewCheckBox
        {
            get
            {
                if ((this.mUIGroupbyviewCheckBox == null))
                {
                    this.mUIGroupbyviewCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIGroupbyviewCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Group by view";
                    this.mUIGroupbyviewCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIGroupbyviewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIGroupbyviewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIShowclasslabelsWindow : WinWindow
    {
        
        public UIShowclasslabelsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIShowclasslabelsCheckBox
        {
            get
            {
                if ((this.mUIShowclasslabelsCheckBox == null))
                {
                    this.mUIShowclasslabelsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIShowclasslabelsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Show class labels";
                    this.mUIShowclasslabelsCheckBox.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUIShowclasslabelsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIShowclasslabelsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITextLimitsWindow : WinWindow
    {
        
        public UITextLimitsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textLimits";
            this.WindowTitles.Add("Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextLimitsEdit
        {
            get
            {
                if ((this.mUITextLimitsEdit == null))
                {
                    this.mUITextLimitsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextLimitsEdit.WindowTitles.Add("Inspection Summary");
                    #endregion
                }
                return this.mUITextLimitsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextLimitsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow2 : WinWindow
    {
        
        public UISaveWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITextWindow UITextWindow
        {
            get
            {
                if ((this.mUITextWindow == null))
                {
                    this.mUITextWindow = new UITextWindow(this);
                }
                return this.mUITextWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITextWindow mUITextWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITextWindow : WinWindow
    {
        
        public UITextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "text";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextEdit
        {
            get
            {
                if ((this.mUITextEdit == null))
                {
                    this.mUITextEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextEdit.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUITextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICustomTextWindow : WinWindow
    {
        
        public UICustomTextWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Custom Text";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Custom Text");
            #endregion
        }
        
        #region Properties
        public UITextValueWindow UITextValueWindow
        {
            get
            {
                if ((this.mUITextValueWindow == null))
                {
                    this.mUITextValueWindow = new UITextValueWindow(this);
                }
                return this.mUITextValueWindow;
            }
        }
        
        public UIApplyWindow UIApplyWindow
        {
            get
            {
                if ((this.mUIApplyWindow == null))
                {
                    this.mUIApplyWindow = new UIApplyWindow(this);
                }
                return this.mUIApplyWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITextValueWindow mUITextValueWindow;
        
        private UIApplyWindow mUIApplyWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITextValueWindow : WinWindow
    {
        
        public UITextValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textValue";
            this.WindowTitles.Add("Custom Text");
            #endregion
        }
        
        #region Properties
        public WinClient UITestClient
        {
            get
            {
                if ((this.mUITestClient == null))
                {
                    this.mUITestClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITestClient.SearchProperties[WinControl.PropertyNames.Name] = "Test";
                    this.mUITestClient.WindowTitles.Add("Custom Text");
                    #endregion
                }
                return this.mUITestClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUITestClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIApplyWindow : WinWindow
    {
        
        public UIApplyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Custom Text");
            #endregion
        }
        
        #region Properties
        public WinButton UIApplyButton
        {
            get
            {
                if ((this.mUIApplyButton == null))
                {
                    this.mUIApplyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIApplyButton.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mUIApplyButton.WindowTitles.Add("Custom Text");
                    #endregion
                }
                return this.mUIApplyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIApplyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveCustomReportWindow : WinWindow
    {
        
        public UISaveCustomReportWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Custom Report";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Save Custom Report");
            #endregion
        }
        
        #region Properties
        public UICustomInspectionSummWindow UICustomInspectionSummWindow
        {
            get
            {
                if ((this.mUICustomInspectionSummWindow == null))
                {
                    this.mUICustomInspectionSummWindow = new UICustomInspectionSummWindow(this);
                }
                return this.mUICustomInspectionSummWindow;
            }
        }
        
        public UISaveWindow3 UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow3(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICustomInspectionSummWindow mUICustomInspectionSummWindow;
        
        private UISaveWindow3 mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICustomInspectionSummWindow : WinWindow
    {
        
        public UICustomInspectionSummWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textName";
            this.WindowTitles.Add("Save Custom Report");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextNameEdit
        {
            get
            {
                if ((this.mUITextNameEdit == null))
                {
                    this.mUITextNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextNameEdit.WindowTitles.Add("Save Custom Report");
                    #endregion
                }
                return this.mUITextNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow3 : WinWindow
    {
        
        public UISaveWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOK";
            this.WindowTitles.Add("Save Custom Report");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save Custom Report");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRevertsettingsWindow : WinWindow
    {
        
        public UIRevertsettingsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Revert settings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Revert settings");
            #endregion
        }
        
        #region Properties
        public UIDataQueryDefectFilteWindow UIDataQueryDefectFilteWindow
        {
            get
            {
                if ((this.mUIDataQueryDefectFilteWindow == null))
                {
                    this.mUIDataQueryDefectFilteWindow = new UIDataQueryDefectFilteWindow(this);
                }
                return this.mUIDataQueryDefectFilteWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDataQueryDefectFilteWindow mUIDataQueryDefectFilteWindow;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDataQueryDefectFilteWindow : WinWindow
    {
        
        public UIDataQueryDefectFilteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnFull";
            this.WindowTitles.Add("Revert settings");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIDataQueryDefectFilteRadioButton
        {
            get
            {
                if ((this.mUIDataQueryDefectFilteRadioButton == null))
                {
                    this.mUIDataQueryDefectFilteRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDataQueryDefectFilteRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Data Query, Defect Filters, Options, and Formatting";
                    this.mUIDataQueryDefectFilteRadioButton.WindowTitles.Add("Revert settings");
                    #endregion
                }
                return this.mUIDataQueryDefectFilteRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIDataQueryDefectFilteRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Revert settings");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Revert settings");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRichTextParseErrorWindow : WinWindow
    {
        
        public UIRichTextParseErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Rich Text Parse Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Rich Text Parse Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Rich Text Parse Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Rich Text Parse Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPagerenderingcrashWindow : WinWindow
    {
        
        public UIPagerenderingcrashWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Page rendering crash";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Page rendering crash");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Page rendering crash");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Page rendering crash");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDeleteMenuItem
        {
            get
            {
                if ((this.mUIDeleteMenuItem == null))
                {
                    this.mUIDeleteMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDeleteMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIDeleteMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDeleteMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmationWindow : WinWindow
    {
        
        public UIConfirmationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirmation";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirmation");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirmation");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProductionQualityAdvWindow : WinWindow
    {
        
        public UIProductionQualityAdvWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Production Quality Advisor";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public UIOKWindow4 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow4(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow4 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow4 : WinWindow
    {
        
        public UIOKWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Production Quality Advisor");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Production Quality Advisor");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunningapplicationsWindow : WinWindow
    {
        
        public UIRunningapplicationsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Running applications";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSTaskSwWClass";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public UIRunningapplicationsToolBar UIRunningapplicationsToolBar
        {
            get
            {
                if ((this.mUIRunningapplicationsToolBar == null))
                {
                    this.mUIRunningapplicationsToolBar = new UIRunningapplicationsToolBar(this);
                }
                return this.mUIRunningapplicationsToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIRunningapplicationsToolBar mUIRunningapplicationsToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunningapplicationsToolBar : WinToolBar
    {
        
        public UIRunningapplicationsToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Running applications";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public WinButton UIMicrosoftExcel959692Button
        {
            get
            {
                if ((this.mUIMicrosoftExcel959692Button == null))
                {
                    this.mUIMicrosoftExcel959692Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIMicrosoftExcel959692Button.SearchProperties[WinButton.PropertyNames.Name] = "Microsoft Excel - 959692.xls  [Compatibility Mode]";
                    this.mUIMicrosoftExcel959692Button.WindowTitles.Add("Running applications");
                    #endregion
                }
                return this.mUIMicrosoftExcel959692Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMicrosoftExcel959692Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIJumpListWindow : WinWindow
    {
        
        public UIJumpListWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Jump List";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DV2ControlHost";
            this.WindowTitles.Add("Jump List");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Jump List");
            #endregion
        }
        
        #region Properties
        public UIJumpListClient UIJumpListClient
        {
            get
            {
                if ((this.mUIJumpListClient == null))
                {
                    this.mUIJumpListClient = new UIJumpListClient(this);
                }
                return this.mUIJumpListClient;
            }
        }
        #endregion
        
        #region Fields
        private UIJumpListClient mUIJumpListClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIJumpListClient : WinClient
    {
        
        public UIJumpListClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Jump List");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIClosewindowMenuItem
        {
            get
            {
                if ((this.mUIClosewindowMenuItem == null))
                {
                    this.mUIClosewindowMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIClosewindowMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close window";
                    this.mUIClosewindowMenuItem.WindowTitles.Add("Jump List");
                    #endregion
                }
                return this.mUIClosewindowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIClosewindowMenuItem;
        #endregion
    }
}
