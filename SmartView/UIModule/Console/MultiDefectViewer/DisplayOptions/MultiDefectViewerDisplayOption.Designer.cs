// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SmartView.UIModule.Console.MultiDefectViewer.MultiDefectViewerDisplayOptionClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class MultiDefectViewerDisplayOption
    {
        
        #region Properties
        public UISmartViewConsole4CamWindow UISmartViewConsole4CamWindow
        {
            get
            {
                if ((this.mUISmartViewConsole4CamWindow == null))
                {
                    this.mUISmartViewConsole4CamWindow = new UISmartViewConsole4CamWindow();
                }
                return this.mUISmartViewConsole4CamWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDisplayOptionsWindow UIDisplayOptionsWindow
        {
            get
            {
                if ((this.mUIDisplayOptionsWindow == null))
                {
                    this.mUIDisplayOptionsWindow = new UIDisplayOptionsWindow();
                }
                return this.mUIDisplayOptionsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISmartViewConsole4CamWindow mUISmartViewConsole4CamWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIDisplayOptionsWindow mUIDisplayOptionsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISmartViewConsole4CamWindow : WinWindow
    {
        
        public UISmartViewConsole4CamWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SmartView Console: 4 Camera, Station";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("SmartView Console: 4 Camera, Station");
            #endregion
        }
        
        #region Properties
        public UIMultiDefectViewerWindow UIMultiDefectViewerWindow
        {
            get
            {
                if ((this.mUIMultiDefectViewerWindow == null))
                {
                    this.mUIMultiDefectViewerWindow = new UIMultiDefectViewerWindow(this);
                }
                return this.mUIMultiDefectViewerWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMultiDefectViewerWindow mUIMultiDefectViewerWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMultiDefectViewerWindow : WinWindow
    {
        
        public UIMultiDefectViewerWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32770";
            this.WindowTitles.Add("SmartView Console: 4 Camera, Station");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMultiDefectViewerTitleBar
        {
            get
            {
                if ((this.mUIMultiDefectViewerTitleBar == null))
                {
                    this.mUIMultiDefectViewerTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMultiDefectViewerTitleBar.WindowTitles.Add("SmartView Console: 4 Camera, Station");
                    #endregion
                }
                return this.mUIMultiDefectViewerTitleBar;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SmartView Console: 4 Camera, Station");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public UIMultiDefectViewerClient UIMultiDefectViewerClient
        {
            get
            {
                if ((this.mUIMultiDefectViewerClient == null))
                {
                    this.mUIMultiDefectViewerClient = new UIMultiDefectViewerClient(this);
                }
                return this.mUIMultiDefectViewerClient;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMultiDefectViewerTitleBar;
        
        private WinButton mUICloseButton;
        
        private UIMultiDefectViewerClient mUIMultiDefectViewerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMultiDefectViewerClient : WinClient
    {
        
        public UIMultiDefectViewerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Multi-Defect Viewer";
            this.WindowTitles.Add("SmartView Console: 4 Camera, Station");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6UserControlDC";
                    this.mUIItemWindow.WindowTitles.Add("SmartView Console: 4 Camera, Station");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DDFLT";
            #endregion
        }
        
        #region Properties
        public WinClient UIDesktopClient
        {
            get
            {
                if ((this.mUIDesktopClient == null))
                {
                    this.mUIDesktopClient = new WinClient(this);
                }
                return this.mUIDesktopClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDesktopClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDisplayOptionsWindow : WinWindow
    {
        
        public UIDisplayOptionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Display Options";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIHeaderWindow UIHeaderWindow
        {
            get
            {
                if ((this.mUIHeaderWindow == null))
                {
                    this.mUIHeaderWindow = new UIHeaderWindow(this);
                }
                return this.mUIHeaderWindow;
            }
        }
        
        public UIClassWindow UIClassWindow
        {
            get
            {
                if ((this.mUIClassWindow == null))
                {
                    this.mUIClassWindow = new UIClassWindow(this);
                }
                return this.mUIClassWindow;
            }
        }
        
        public UIViewWindow UIViewWindow
        {
            get
            {
                if ((this.mUIViewWindow == null))
                {
                    this.mUIViewWindow = new UIViewWindow(this);
                }
                return this.mUIViewWindow;
            }
        }
        
        public UIDefectboxesWindow UIDefectboxesWindow
        {
            get
            {
                if ((this.mUIDefectboxesWindow == null))
                {
                    this.mUIDefectboxesWindow = new UIDefectboxesWindow(this);
                }
                return this.mUIDefectboxesWindow;
            }
        }
        
        public UIDefectlabelsWindow UIDefectlabelsWindow
        {
            get
            {
                if ((this.mUIDefectlabelsWindow == null))
                {
                    this.mUIDefectlabelsWindow = new UIDefectlabelsWindow(this);
                }
                return this.mUIDefectlabelsWindow;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIImageWindow UIImageWindow
        {
            get
            {
                if ((this.mUIImageWindow == null))
                {
                    this.mUIImageWindow = new UIImageWindow(this);
                }
                return this.mUIImageWindow;
            }
        }
        
        public UICrossweblocatorWindow UICrossweblocatorWindow
        {
            get
            {
                if ((this.mUICrossweblocatorWindow == null))
                {
                    this.mUICrossweblocatorWindow = new UICrossweblocatorWindow(this);
                }
                return this.mUICrossweblocatorWindow;
            }
        }
        
        public UIDownweblocatorWindow UIDownweblocatorWindow
        {
            get
            {
                if ((this.mUIDownweblocatorWindow == null))
                {
                    this.mUIDownweblocatorWindow = new UIDownweblocatorWindow(this);
                }
                return this.mUIDownweblocatorWindow;
            }
        }
        
        public UIFeaturesWindow UIFeaturesWindow
        {
            get
            {
                if ((this.mUIFeaturesWindow == null))
                {
                    this.mUIFeaturesWindow = new UIFeaturesWindow(this);
                }
                return this.mUIFeaturesWindow;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIPointertoolbarWindow UIPointertoolbarWindow
        {
            get
            {
                if ((this.mUIPointertoolbarWindow == null))
                {
                    this.mUIPointertoolbarWindow = new UIPointertoolbarWindow(this);
                }
                return this.mUIPointertoolbarWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIInvertWindow UIInvertWindow
        {
            get
            {
                if ((this.mUIInvertWindow == null))
                {
                    this.mUIInvertWindow = new UIInvertWindow(this);
                }
                return this.mUIInvertWindow;
            }
        }
        
        public UIThresholdedpixelsWindow UIThresholdedpixelsWindow
        {
            get
            {
                if ((this.mUIThresholdedpixelsWindow == null))
                {
                    this.mUIThresholdedpixelsWindow = new UIThresholdedpixelsWindow(this);
                }
                return this.mUIThresholdedpixelsWindow;
            }
        }
        
        public UIIntensitylevelsWindow UIIntensitylevelsWindow
        {
            get
            {
                if ((this.mUIIntensitylevelsWindow == null))
                {
                    this.mUIIntensitylevelsWindow = new UIIntensitylevelsWindow(this);
                }
                return this.mUIIntensitylevelsWindow;
            }
        }
        
        public UIGraybinsWindow UIGraybinsWindow
        {
            get
            {
                if ((this.mUIGraybinsWindow == null))
                {
                    this.mUIGraybinsWindow = new UIGraybinsWindow(this);
                }
                return this.mUIGraybinsWindow;
            }
        }
        
        public UISubviewthresholdedpiWindow UISubviewthresholdedpiWindow
        {
            get
            {
                if ((this.mUISubviewthresholdedpiWindow == null))
                {
                    this.mUISubviewthresholdedpiWindow = new UISubviewthresholdedpiWindow(this);
                }
                return this.mUISubviewthresholdedpiWindow;
            }
        }
        
        public UIApplyWindow UIApplyWindow
        {
            get
            {
                if ((this.mUIApplyWindow == null))
                {
                    this.mUIApplyWindow = new UIApplyWindow(this);
                }
                return this.mUIApplyWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIHeaderWindow mUIHeaderWindow;
        
        private UIClassWindow mUIClassWindow;
        
        private UIViewWindow mUIViewWindow;
        
        private UIDefectboxesWindow mUIDefectboxesWindow;
        
        private UIDefectlabelsWindow mUIDefectlabelsWindow;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIImageWindow mUIImageWindow;
        
        private UICrossweblocatorWindow mUICrossweblocatorWindow;
        
        private UIDownweblocatorWindow mUIDownweblocatorWindow;
        
        private UIFeaturesWindow mUIFeaturesWindow;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIPointertoolbarWindow mUIPointertoolbarWindow;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIInvertWindow mUIInvertWindow;
        
        private UIThresholdedpixelsWindow mUIThresholdedpixelsWindow;
        
        private UIIntensitylevelsWindow mUIIntensitylevelsWindow;
        
        private UIGraybinsWindow mUIGraybinsWindow;
        
        private UISubviewthresholdedpiWindow mUISubviewthresholdedpiWindow;
        
        private UIApplyWindow mUIApplyWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderWindow : WinWindow
    {
        
        public UIHeaderWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "29";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIHeaderCheckBox
        {
            get
            {
                if ((this.mUIHeaderCheckBox == null))
                {
                    this.mUIHeaderCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIHeaderCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Header";
                    this.mUIHeaderCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIHeaderCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIHeaderCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIClassWindow : WinWindow
    {
        
        public UIClassWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "23";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIClassCheckBox
        {
            get
            {
                if ((this.mUIClassCheckBox == null))
                {
                    this.mUIClassCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIClassCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Class";
                    this.mUIClassCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIClassCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIClassCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIViewWindow : WinWindow
    {
        
        public UIViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "22";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIViewCheckBox
        {
            get
            {
                if ((this.mUIViewCheckBox == null))
                {
                    this.mUIViewCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIViewCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "View";
                    this.mUIViewCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectboxesWindow : WinWindow
    {
        
        public UIDefectboxesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "25";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDefectboxesCheckBox
        {
            get
            {
                if ((this.mUIDefectboxesCheckBox == null))
                {
                    this.mUIDefectboxesCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDefectboxesCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Defect boxes";
                    this.mUIDefectboxesCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIDefectboxesCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDefectboxesCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectlabelsWindow : WinWindow
    {
        
        public UIDefectlabelsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "34";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDefectlabelsCheckBox
        {
            get
            {
                if ((this.mUIDefectlabelsCheckBox == null))
                {
                    this.mUIDefectlabelsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDefectlabelsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Defect labels";
                    this.mUIDefectlabelsCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIDefectlabelsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDefectlabelsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "24";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImageWindow : WinWindow
    {
        
        public UIImageWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIImageCheckBox
        {
            get
            {
                if ((this.mUIImageCheckBox == null))
                {
                    this.mUIImageCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIImageCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Image";
                    this.mUIImageCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIImageCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIImageCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICrossweblocatorWindow : WinWindow
    {
        
        public UICrossweblocatorWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "31";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UICrossweblocatorCheckBox
        {
            get
            {
                if ((this.mUICrossweblocatorCheckBox == null))
                {
                    this.mUICrossweblocatorCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUICrossweblocatorCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Crossweb locator";
                    this.mUICrossweblocatorCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUICrossweblocatorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUICrossweblocatorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDownweblocatorWindow : WinWindow
    {
        
        public UIDownweblocatorWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "26";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDownweblocatorCheckBox
        {
            get
            {
                if ((this.mUIDownweblocatorCheckBox == null))
                {
                    this.mUIDownweblocatorCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDownweblocatorCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Downweb locator";
                    this.mUIDownweblocatorCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIDownweblocatorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDownweblocatorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFeaturesWindow : WinWindow
    {
        
        public UIFeaturesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "33";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIFeaturesCheckBox
        {
            get
            {
                if ((this.mUIFeaturesCheckBox == null))
                {
                    this.mUIFeaturesCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIFeaturesCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Features";
                    this.mUIFeaturesCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIFeaturesCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIFeaturesCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "28";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "27";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPointertoolbarWindow : WinWindow
    {
        
        public UIPointertoolbarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "20";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIPointertoolbarCheckBox
        {
            get
            {
                if ((this.mUIPointertoolbarCheckBox == null))
                {
                    this.mUIPointertoolbarCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIPointertoolbarCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Pointer toolbar";
                    this.mUIPointertoolbarCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIPointertoolbarCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIPointertoolbarCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "13";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInvertWindow : WinWindow
    {
        
        public UIInvertWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIInvertCheckBox
        {
            get
            {
                if ((this.mUIInvertCheckBox == null))
                {
                    this.mUIInvertCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIInvertCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Invert";
                    this.mUIInvertCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIInvertCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIInvertCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIThresholdedpixelsWindow : WinWindow
    {
        
        public UIThresholdedpixelsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "17";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIThresholdedpixelsCheckBox
        {
            get
            {
                if ((this.mUIThresholdedpixelsCheckBox == null))
                {
                    this.mUIThresholdedpixelsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIThresholdedpixelsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Thresholded pixels";
                    this.mUIThresholdedpixelsCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIThresholdedpixelsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIThresholdedpixelsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIIntensitylevelsWindow : WinWindow
    {
        
        public UIIntensitylevelsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "16";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIIntensitylevelsCheckBox
        {
            get
            {
                if ((this.mUIIntensitylevelsCheckBox == null))
                {
                    this.mUIIntensitylevelsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIIntensitylevelsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Intensity levels";
                    this.mUIIntensitylevelsCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIIntensitylevelsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIIntensitylevelsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGraybinsWindow : WinWindow
    {
        
        public UIGraybinsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "15";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIGraybinsCheckBox
        {
            get
            {
                if ((this.mUIGraybinsCheckBox == null))
                {
                    this.mUIGraybinsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIGraybinsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Gray bins";
                    this.mUIGraybinsCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIGraybinsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIGraybinsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISubviewthresholdedpiWindow : WinWindow
    {
        
        public UISubviewthresholdedpiWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "14";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UISubviewthresholdedpiCheckBox
        {
            get
            {
                if ((this.mUISubviewthresholdedpiCheckBox == null))
                {
                    this.mUISubviewthresholdedpiCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISubviewthresholdedpiCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Subview thresholded pixels";
                    this.mUISubviewthresholdedpiCheckBox.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUISubviewthresholdedpiCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUISubviewthresholdedpiCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIApplyWindow : WinWindow
    {
        
        public UIApplyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "37";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIApplyButton
        {
            get
            {
                if ((this.mUIApplyButton == null))
                {
                    this.mUIApplyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIApplyButton.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mUIApplyButton.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIApplyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIApplyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "36";
            this.WindowTitles.Add("Display Options");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Display Options");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
