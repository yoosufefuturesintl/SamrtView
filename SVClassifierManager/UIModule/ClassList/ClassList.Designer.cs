// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SVClassifierManager.UIModule.ClassList.ClassListClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;


    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class ClassList
    {

        #region Properties
        public UISmartLearnClassifierWindow UISmartLearnClassifierWindow
        {
            get
            {
                if ((this.mUISmartLearnClassifierWindow == null))
                {
                    this.mUISmartLearnClassifierWindow = new UISmartLearnClassifierWindow();
                }
                return this.mUISmartLearnClassifierWindow;
            }
        }

        public UIImportClassesWindow UIImportClassesWindow
        {
            get
            {
                if ((this.mUIImportClassesWindow == null))
                {
                    this.mUIImportClassesWindow = new UIImportClassesWindow();
                }
                return this.mUIImportClassesWindow;
            }
        }

        public UIImportClassWindow UIImportClassWindow
        {
            get
            {
                if ((this.mUIImportClassWindow == null))
                {
                    this.mUIImportClassWindow = new UIImportClassWindow();
                }
                return this.mUIImportClassWindow;
            }
        }

        public UISmartLearnClassifierWindow1 UISmartLearnClassifierWindow1
        {
            get
            {
                if ((this.mUISmartLearnClassifierWindow1 == null))
                {
                    this.mUISmartLearnClassifierWindow1 = new UISmartLearnClassifierWindow1();
                }
                return this.mUISmartLearnClassifierWindow1;
            }
        }

        public UIColorWindow1 UIColorWindow
        {
            get
            {
                if ((this.mUIColorWindow == null))
                {
                    this.mUIColorWindow = new UIColorWindow1();
                }
                return this.mUIColorWindow;
            }
        }
        #endregion

        #region Fields
        private UISmartLearnClassifierWindow mUISmartLearnClassifierWindow;

        private UIImportClassesWindow mUIImportClassesWindow;

        private UIImportClassWindow mUIImportClassWindow;

        private UISmartLearnClassifierWindow1 mUISmartLearnClassifierWindow1;

        private UIColorWindow1 mUIColorWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISmartLearnClassifierWindow : WinWindow
    {

        public UISmartLearnClassifierWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SmartLearn Classifier Manager";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SmartLearn Classifier Manager");
            #endregion
        }

        #region Properties
        public UIBtnImportClassesWindow UIBtnImportClassesWindow
        {
            get
            {
                if ((this.mUIBtnImportClassesWindow == null))
                {
                    this.mUIBtnImportClassesWindow = new UIBtnImportClassesWindow(this);
                }
                return this.mUIBtnImportClassesWindow;
            }
        }

        public UITabsWindow UITabsWindow
        {
            get
            {
                if ((this.mUITabsWindow == null))
                {
                    this.mUITabsWindow = new UITabsWindow(this);
                }
                return this.mUITabsWindow;
            }
        }
        #endregion

        #region Fields
        private UIBtnImportClassesWindow mUIBtnImportClassesWindow;

        private UITabsWindow mUITabsWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBtnImportClassesWindow : WinWindow
    {

        public UIBtnImportClassesWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnImportClasses";
            this.WindowTitles.Add("SmartLearn Classifier Manager");
            #endregion
        }

        #region Properties
        public WinButton UIBtnImportClassesButton
        {
            get
            {
                if ((this.mUIBtnImportClassesButton == null))
                {
                    this.mUIBtnImportClassesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnImportClassesButton.WindowTitles.Add("SmartLearn Classifier Manager");
                    #endregion
                }
                return this.mUIBtnImportClassesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIBtnImportClassesButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITabsWindow : WinWindow
    {

        public UITabsWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabs";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("SmartLearn Classifier Manager");
            #endregion
        }

        #region Properties
        public WinTabPage UIClassListTabPage
        {
            get
            {
                if ((this.mUIClassListTabPage == null))
                {
                    this.mUIClassListTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIClassListTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Class List";
                    this.mUIClassListTabPage.WindowTitles.Add("SmartLearn Classifier Manager");
                    #endregion
                }
                return this.mUIClassListTabPage;
            }
        }
        #endregion

        #region Fields
        private WinTabPage mUIClassListTabPage;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImportClassesWindow : WinWindow
    {

        public UIImportClassesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import Classes";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Import Classes");
            #endregion
        }

        #region Properties
        public UITextNameWindow UITextNameWindow
        {
            get
            {
                if ((this.mUITextNameWindow == null))
                {
                    this.mUITextNameWindow = new UITextNameWindow(this);
                }
                return this.mUITextNameWindow;
            }
        }

        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }

        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion

        #region Fields
        private UITextNameWindow mUITextNameWindow;

        private UIOpenWindow mUIOpenWindow;

        private UIOKWindow mUIOKWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITextNameWindow : WinWindow
    {

        public UITextNameWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textName";
            this.WindowTitles.Add("Import Classes");
            #endregion
        }

        #region Properties
        public WinEdit UITextNameEdit
        {
            get
            {
                if ((this.mUITextNameEdit == null))
                {
                    this.mUITextNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextNameEdit.WindowTitles.Add("Import Classes");
                    #endregion
                }
                return this.mUITextNameEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITextNameEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {

        public UIOpenWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Import Classes");
            #endregion
        }

        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Import Classes");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {

        public UIOKWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Import Classes");
            #endregion
        }

        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Import Classes");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImportClassWindow : WinWindow
    {

        public UIImportClassWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import Class";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Import Class");
            #endregion
        }

        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion

        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {

        public UIYesWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Import Class");
            #endregion
        }

        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Import Class");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISmartLearnClassifierWindow1 : WinWindow
    {

        public UISmartLearnClassifierWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SmartLearn Classifier Manager - [ATM0104]";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public UIBtnAddClassWindow UIBtnAddClassWindow
        {
            get
            {
                if ((this.mUIBtnAddClassWindow == null))
                {
                    this.mUIBtnAddClassWindow = new UIBtnAddClassWindow(this);
                }
                return this.mUIBtnAddClassWindow;
            }
        }

        public UITxtNameWindow UITxtNameWindow
        {
            get
            {
                if ((this.mUITxtNameWindow == null))
                {
                    this.mUITxtNameWindow = new UITxtNameWindow(this);
                }
                return this.mUITxtNameWindow;
            }
        }

        public UITxtDescriptionWindow UITxtDescriptionWindow
        {
            get
            {
                if ((this.mUITxtDescriptionWindow == null))
                {
                    this.mUITxtDescriptionWindow = new UITxtDescriptionWindow(this);
                }
                return this.mUITxtDescriptionWindow;
            }
        }

        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UIColorWindow UIColorWindow
        {
            get
            {
                if ((this.mUIColorWindow == null))
                {
                    this.mUIColorWindow = new UIColorWindow(this);
                }
                return this.mUIColorWindow;
            }
        }

        public UIDefectonlyWindow UIDefectonlyWindow
        {
            get
            {
                if ((this.mUIDefectonlyWindow == null))
                {
                    this.mUIDefectonlyWindow = new UIDefectonlyWindow(this);
                }
                return this.mUIDefectonlyWindow;
            }
        }

        public UIFiltercountonlyWindow UIFiltercountonlyWindow
        {
            get
            {
                if ((this.mUIFiltercountonlyWindow == null))
                {
                    this.mUIFiltercountonlyWindow = new UIFiltercountonlyWindow(this);
                }
                return this.mUIFiltercountonlyWindow;
            }
        }

        public UIDiscarddonotsaveWindow UIDiscarddonotsaveWindow
        {
            get
            {
                if ((this.mUIDiscarddonotsaveWindow == null))
                {
                    this.mUIDiscarddonotsaveWindow = new UIDiscarddonotsaveWindow(this);
                }
                return this.mUIDiscarddonotsaveWindow;
            }
        }

        public UIDefectandgrayWindow UIDefectandgrayWindow
        {
            get
            {
                if ((this.mUIDefectandgrayWindow == null))
                {
                    this.mUIDefectandgrayWindow = new UIDefectandgrayWindow(this);
                }
                return this.mUIDefectandgrayWindow;
            }
        }

        public UIListSaveGrayWindow UIListSaveGrayWindow
        {
            get
            {
                if ((this.mUIListSaveGrayWindow == null))
                {
                    this.mUIListSaveGrayWindow = new UIListSaveGrayWindow(this);
                }
                return this.mUIListSaveGrayWindow;
            }
        }

        public UIUsedefectsboundingboWindow UIUsedefectsboundingboWindow
        {
            get
            {
                if ((this.mUIUsedefectsboundingboWindow == null))
                {
                    this.mUIUsedefectsboundingboWindow = new UIUsedefectsboundingboWindow(this);
                }
                return this.mUIUsedefectsboundingboWindow;
            }
        }

        public UIDonotimportWindow UIDonotimportWindow
        {
            get
            {
                if ((this.mUIDonotimportWindow == null))
                {
                    this.mUIDonotimportWindow = new UIDonotimportWindow(this);
                }
                return this.mUIDonotimportWindow;
            }
        }

        public UIDefectonlyWindow1 UIDefectonlyWindow1
        {
            get
            {
                if ((this.mUIDefectonlyWindow1 == null))
                {
                    this.mUIDefectonlyWindow1 = new UIDefectonlyWindow1(this);
                }
                return this.mUIDefectonlyWindow1;
            }
        }

        public UIDefectandgrayWindow1 UIDefectandgrayWindow1
        {
            get
            {
                if ((this.mUIDefectandgrayWindow1 == null))
                {
                    this.mUIDefectandgrayWindow1 = new UIDefectandgrayWindow1(this);
                }
                return this.mUIDefectandgrayWindow1;
            }
        }

        public UIBreakongoingdefectWindow UIBreakongoingdefectWindow
        {
            get
            {
                if ((this.mUIBreakongoingdefectWindow == null))
                {
                    this.mUIBreakongoingdefectWindow = new UIBreakongoingdefectWindow(this);
                }
                return this.mUIBreakongoingdefectWindow;
            }
        }

        public UIReclassifywithoutongWindow UIReclassifywithoutongWindow
        {
            get
            {
                if ((this.mUIReclassifywithoutongWindow == null))
                {
                    this.mUIReclassifywithoutongWindow = new UIReclassifywithoutongWindow(this);
                }
                return this.mUIReclassifywithoutongWindow;
            }
        }

        public UIPreventcamtocammergiWindow UIPreventcamtocammergiWindow
        {
            get
            {
                if ((this.mUIPreventcamtocammergiWindow == null))
                {
                    this.mUIPreventcamtocammergiWindow = new UIPreventcamtocammergiWindow(this);
                }
                return this.mUIPreventcamtocammergiWindow;
            }
        }

        public UIPanelSpecialProcessiWindow UIPanelSpecialProcessiWindow
        {
            get
            {
                if ((this.mUIPanelSpecialProcessiWindow == null))
                {
                    this.mUIPanelSpecialProcessiWindow = new UIPanelSpecialProcessiWindow(this);
                }
                return this.mUIPanelSpecialProcessiWindow;
            }
        }

        public UIViewtoviewcorrelatioWindow UIViewtoviewcorrelatioWindow
        {
            get
            {
                if ((this.mUIViewtoviewcorrelatioWindow == null))
                {
                    this.mUIViewtoviewcorrelatioWindow = new UIViewtoviewcorrelatioWindow(this);
                }
                return this.mUIViewtoviewcorrelatioWindow;
            }
        }

        public UIExtendedconnectivityWindow UIExtendedconnectivityWindow
        {
            get
            {
                if ((this.mUIExtendedconnectivityWindow == null))
                {
                    this.mUIExtendedconnectivityWindow = new UIExtendedconnectivityWindow(this);
                }
                return this.mUIExtendedconnectivityWindow;
            }
        }

        public UITxtNotificationSeverWindow UITxtNotificationSeverWindow
        {
            get
            {
                if ((this.mUITxtNotificationSeverWindow == null))
                {
                    this.mUITxtNotificationSeverWindow = new UITxtNotificationSeverWindow(this);
                }
                return this.mUITxtNotificationSeverWindow;
            }
        }

        public UITxtNotificationDefecWindow UITxtNotificationDefecWindow
        {
            get
            {
                if ((this.mUITxtNotificationDefecWindow == null))
                {
                    this.mUITxtNotificationDefecWindow = new UITxtNotificationDefecWindow(this);
                }
                return this.mUITxtNotificationDefecWindow;
            }
        }

        public UITxtNotificationDensiWindow UITxtNotificationDensiWindow
        {
            get
            {
                if ((this.mUITxtNotificationDensiWindow == null))
                {
                    this.mUITxtNotificationDensiWindow = new UITxtNotificationDensiWindow(this);
                }
                return this.mUITxtNotificationDensiWindow;
            }
        }

        public UITxtNotificationCumulWindow UITxtNotificationCumulWindow
        {
            get
            {
                if ((this.mUITxtNotificationCumulWindow == null))
                {
                    this.mUITxtNotificationCumulWindow = new UITxtNotificationCumulWindow(this);
                }
                return this.mUITxtNotificationCumulWindow;
            }
        }

        public UINotifyateachreportinWindow UINotifyateachreportinWindow
        {
            get
            {
                if ((this.mUINotifyateachreportinWindow == null))
                {
                    this.mUINotifyateachreportinWindow = new UINotifyateachreportinWindow(this);
                }
                return this.mUINotifyateachreportinWindow;
            }
        }

        public UIPanelWindow UIPanelWindow
        {
            get
            {
                if ((this.mUIPanelWindow == null))
                {
                    this.mUIPanelWindow = new UIPanelWindow(this);
                }
                return this.mUIPanelWindow;
            }
        }
        #endregion

        #region Fields
        private UIBtnAddClassWindow mUIBtnAddClassWindow;

        private UITxtNameWindow mUITxtNameWindow;

        private UITxtDescriptionWindow mUITxtDescriptionWindow;

        private UIItemWindow mUIItemWindow;

        private UIColorWindow mUIColorWindow;

        private UIDefectonlyWindow mUIDefectonlyWindow;

        private UIFiltercountonlyWindow mUIFiltercountonlyWindow;

        private UIDiscarddonotsaveWindow mUIDiscarddonotsaveWindow;

        private UIDefectandgrayWindow mUIDefectandgrayWindow;

        private UIListSaveGrayWindow mUIListSaveGrayWindow;

        private UIUsedefectsboundingboWindow mUIUsedefectsboundingboWindow;

        private UIDonotimportWindow mUIDonotimportWindow;

        private UIDefectonlyWindow1 mUIDefectonlyWindow1;

        private UIDefectandgrayWindow1 mUIDefectandgrayWindow1;

        private UIBreakongoingdefectWindow mUIBreakongoingdefectWindow;

        private UIReclassifywithoutongWindow mUIReclassifywithoutongWindow;

        private UIPreventcamtocammergiWindow mUIPreventcamtocammergiWindow;

        private UIPanelSpecialProcessiWindow mUIPanelSpecialProcessiWindow;

        private UIViewtoviewcorrelatioWindow mUIViewtoviewcorrelatioWindow;

        private UIExtendedconnectivityWindow mUIExtendedconnectivityWindow;

        private UITxtNotificationSeverWindow mUITxtNotificationSeverWindow;

        private UITxtNotificationDefecWindow mUITxtNotificationDefecWindow;

        private UITxtNotificationDensiWindow mUITxtNotificationDensiWindow;

        private UITxtNotificationCumulWindow mUITxtNotificationCumulWindow;

        private UINotifyateachreportinWindow mUINotifyateachreportinWindow;

        private UIPanelWindow mUIPanelWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBtnAddClassWindow : WinWindow
    {

        public UIBtnAddClassWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddClass";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinButton UIBtnAddClassButton
        {
            get
            {
                if ((this.mUIBtnAddClassButton == null))
                {
                    this.mUIBtnAddClassButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnAddClassButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIBtnAddClassButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIBtnAddClassButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtNameWindow : WinWindow
    {

        public UITxtNameWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtName";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUITxtNameEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtNameEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtDescriptionWindow : WinWindow
    {

        public UITxtDescriptionWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtDescription";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtDescriptionEdit
        {
            get
            {
                if ((this.mUITxtDescriptionEdit == null))
                {
                    this.mUITxtDescriptionEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtDescriptionEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Description";
                    this.mUITxtDescriptionEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtDescriptionEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtDescriptionEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {

        public UIItemWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtSymbol";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtSymbolEdit
        {
            get
            {
                if ((this.mUITxtSymbolEdit == null))
                {
                    this.mUITxtSymbolEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtSymbolEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Symbol:";
                    this.mUITxtSymbolEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtSymbolEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtSymbolEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIColorWindow : WinWindow
    {

        public UIColorWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnColor";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinButton UIColorButton
        {
            get
            {
                if ((this.mUIColorButton == null))
                {
                    this.mUIColorButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIColorButton.SearchProperties[WinButton.PropertyNames.Name] = "Color...";
                    this.mUIColorButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIColorButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIColorButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectonlyWindow : WinWindow
    {

        public UIDefectonlyWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveDefect";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIDefectonlyRadioButton
        {
            get
            {
                if ((this.mUIDefectonlyRadioButton == null))
                {
                    this.mUIDefectonlyRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDefectonlyRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Defect only";
                    this.mUIDefectonlyRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIDefectonlyRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIDefectonlyRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFiltercountonlyWindow : WinWindow
    {

        public UIFiltercountonlyWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveFilter";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIFiltercountonlyRadioButton
        {
            get
            {
                if ((this.mUIFiltercountonlyRadioButton == null))
                {
                    this.mUIFiltercountonlyRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIFiltercountonlyRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Filter (count only)";
                    this.mUIFiltercountonlyRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIFiltercountonlyRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIFiltercountonlyRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDiscarddonotsaveWindow : WinWindow
    {

        public UIDiscarddonotsaveWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveDiscard";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIDiscarddonotsaveRadioButton
        {
            get
            {
                if ((this.mUIDiscarddonotsaveRadioButton == null))
                {
                    this.mUIDiscarddonotsaveRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDiscarddonotsaveRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Discard (do not save)";
                    this.mUIDiscarddonotsaveRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIDiscarddonotsaveRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIDiscarddonotsaveRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectandgrayWindow : WinWindow
    {

        public UIDefectandgrayWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveGray";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIDefectandgrayRadioButton
        {
            get
            {
                if ((this.mUIDefectandgrayRadioButton == null))
                {
                    this.mUIDefectandgrayRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDefectandgrayRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Defect and gray";
                    this.mUIDefectandgrayRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIDefectandgrayRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIDefectandgrayRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIListSaveGrayWindow : WinWindow
    {

        public UIListSaveGrayWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listSaveGray";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinComboBox UIListSaveGrayComboBox
        {
            get
            {
                if ((this.mUIListSaveGrayComboBox == null))
                {
                    this.mUIListSaveGrayComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIListSaveGrayComboBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIListSaveGrayComboBox;
            }
        }
        #endregion

        #region Fields
        private WinComboBox mUIListSaveGrayComboBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIUsedefectsboundingboWindow : WinWindow
    {

        public UIUsedefectsboundingboWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUseBoundingBox";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UIUsedefectsboundingboCheckBox
        {
            get
            {
                if ((this.mUIUsedefectsboundingboCheckBox == null))
                {
                    this.mUIUsedefectsboundingboCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIUsedefectsboundingboCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use defect\'s bounding box";
                    this.mUIUsedefectsboundingboCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIUsedefectsboundingboCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUIUsedefectsboundingboCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDonotimportWindow : WinWindow
    {

        public UIDonotimportWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnImportDiscard";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIDonotimportRadioButton
        {
            get
            {
                if ((this.mUIDonotimportRadioButton == null))
                {
                    this.mUIDonotimportRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDonotimportRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Do not import";
                    this.mUIDonotimportRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIDonotimportRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIDonotimportRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectonlyWindow1 : WinWindow
    {

        public UIDefectonlyWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnImportDefect";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIDefectonlyRadioButton
        {
            get
            {
                if ((this.mUIDefectonlyRadioButton == null))
                {
                    this.mUIDefectonlyRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDefectonlyRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Defect only";
                    this.mUIDefectonlyRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIDefectonlyRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIDefectonlyRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefectandgrayWindow1 : WinWindow
    {

        public UIDefectandgrayWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnImportGray";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinRadioButton UIDefectandgrayRadioButton
        {
            get
            {
                if ((this.mUIDefectandgrayRadioButton == null))
                {
                    this.mUIDefectandgrayRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDefectandgrayRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Defect and gray";
                    this.mUIDefectandgrayRadioButton.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIDefectandgrayRadioButton;
            }
        }
        #endregion

        #region Fields
        private WinRadioButton mUIDefectandgrayRadioButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBreakongoingdefectWindow : WinWindow
    {

        public UIBreakongoingdefectWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkBreakOngoing";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UIBreakongoingdefectCheckBox
        {
            get
            {
                if ((this.mUIBreakongoingdefectCheckBox == null))
                {
                    this.mUIBreakongoingdefectCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIBreakongoingdefectCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Break ongoing defect";
                    this.mUIBreakongoingdefectCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIBreakongoingdefectCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUIBreakongoingdefectCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIReclassifywithoutongWindow : WinWindow
    {

        public UIReclassifywithoutongWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkReclassifyWithoutOngoing";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UIReclassifywithoutongCheckBox
        {
            get
            {
                if ((this.mUIReclassifywithoutongCheckBox == null))
                {
                    this.mUIReclassifywithoutongCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIReclassifywithoutongCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Reclassify without ongoing feature";
                    this.mUIReclassifywithoutongCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIReclassifywithoutongCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUIReclassifywithoutongCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPreventcamtocammergiWindow : WinWindow
    {

        public UIPreventcamtocammergiWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNoCamToCam";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UIPreventcamtocammergiCheckBox
        {
            get
            {
                if ((this.mUIPreventcamtocammergiCheckBox == null))
                {
                    this.mUIPreventcamtocammergiCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIPreventcamtocammergiCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Prevent cam-to-cam merging";
                    this.mUIPreventcamtocammergiCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIPreventcamtocammergiCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUIPreventcamtocammergiCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelSpecialProcessiWindow : WinWindow
    {

        public UIPanelSpecialProcessiWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelSpecialProcessing";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinClient UIPanelSpecialProcessiClient
        {
            get
            {
                if ((this.mUIPanelSpecialProcessiClient == null))
                {
                    this.mUIPanelSpecialProcessiClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanelSpecialProcessiClient.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIPanelSpecialProcessiClient;
            }
        }
        #endregion

        #region Fields
        private WinClient mUIPanelSpecialProcessiClient;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIViewtoviewcorrelatioWindow : WinWindow
    {

        public UIViewtoviewcorrelatioWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSpecialV2V";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UIViewtoviewcorrelatioCheckBox
        {
            get
            {
                if ((this.mUIViewtoviewcorrelatioCheckBox == null))
                {
                    this.mUIViewtoviewcorrelatioCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIViewtoviewcorrelatioCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "View-to-view correlation";
                    this.mUIViewtoviewcorrelatioCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIViewtoviewcorrelatioCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUIViewtoviewcorrelatioCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExtendedconnectivityWindow : WinWindow
    {

        public UIExtendedconnectivityWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSpecialExtended";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UIExtendedconnectivityCheckBox
        {
            get
            {
                if ((this.mUIExtendedconnectivityCheckBox == null))
                {
                    this.mUIExtendedconnectivityCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIExtendedconnectivityCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Extended connectivity";
                    this.mUIExtendedconnectivityCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIExtendedconnectivityCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUIExtendedconnectivityCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtNotificationSeverWindow : WinWindow
    {

        public UITxtNotificationSeverWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNotificationSeverity";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtNotificationSeverEdit
        {
            get
            {
                if ((this.mUITxtNotificationSeverEdit == null))
                {
                    this.mUITxtNotificationSeverEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNotificationSeverEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Defect rate notification count";
                    this.mUITxtNotificationSeverEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtNotificationSeverEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtNotificationSeverEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtNotificationDefecWindow : WinWindow
    {

        public UITxtNotificationDefecWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNotificationDefectRate";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtNotificationDefecEdit
        {
            get
            {
                if ((this.mUITxtNotificationDefecEdit == null))
                {
                    this.mUITxtNotificationDefecEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNotificationDefecEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cumulative notification count";
                    this.mUITxtNotificationDefecEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtNotificationDefecEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtNotificationDefecEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtNotificationDensiWindow : WinWindow
    {

        public UITxtNotificationDensiWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNotificationDensity";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtNotificationDensiEdit
        {
            get
            {
                if ((this.mUITxtNotificationDensiEdit == null))
                {
                    this.mUITxtNotificationDensiEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNotificationDensiEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Defect density threshold";
                    this.mUITxtNotificationDensiEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtNotificationDensiEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtNotificationDensiEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtNotificationCumulWindow : WinWindow
    {

        public UITxtNotificationCumulWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNotificationCumulative";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinEdit UITxtNotificationCumulEdit
        {
            get
            {
                if ((this.mUITxtNotificationCumulEdit == null))
                {
                    this.mUITxtNotificationCumulEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNotificationCumulEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cumulative notification count";
                    this.mUITxtNotificationCumulEdit.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUITxtNotificationCumulEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITxtNotificationCumulEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINotifyateachreportinWindow : WinWindow
    {

        public UINotifyateachreportinWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNotifyEachReportingDistance";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinCheckBox UINotifyateachreportinCheckBox
        {
            get
            {
                if ((this.mUINotifyateachreportinCheckBox == null))
                {
                    this.mUINotifyateachreportinCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUINotifyateachreportinCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Notify at each reporting distance";
                    this.mUINotifyateachreportinCheckBox.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUINotifyateachreportinCheckBox;
            }
        }
        #endregion

        #region Fields
        private WinCheckBox mUINotifyateachreportinCheckBox;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelWindow : WinWindow
    {

        public UIPanelWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel";
            this.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
            #endregion
        }

        #region Properties
        public WinClient UIPanelClient
        {
            get
            {
                if ((this.mUIPanelClient == null))
                {
                    this.mUIPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanelClient.WindowTitles.Add("SmartLearn Classifier Manager - [ATM0104]");
                    #endregion
                }
                return this.mUIPanelClient;
            }
        }
        #endregion

        #region Fields
        private WinClient mUIPanelClient;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIColorWindow1 : WinWindow
    {

        public UIColorWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Color";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Color");
            #endregion
        }

        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion

        #region Fields
        private UIItemWindow1 mUIItemWindow;

        private UIOKWindow1 mUIOKWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {

        public UIItemWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "720";
            this.WindowTitles.Add("Color");
            #endregion
        }

        #region Properties
        public WinText UIBasiccolorsText
        {
            get
            {
                if ((this.mUIBasiccolorsText == null))
                {
                    this.mUIBasiccolorsText = new WinText(this);
                    #region Search Criteria
                    this.mUIBasiccolorsText.SearchProperties[WinText.PropertyNames.Name] = "Basic colors:";
                    this.mUIBasiccolorsText.WindowTitles.Add("Color");
                    #endregion
                }
                return this.mUIBasiccolorsText;
            }
        }
        #endregion

        #region Fields
        private WinText mUIBasiccolorsText;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow1 : WinWindow
    {

        public UIOKWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Color");
            #endregion
        }

        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Color");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
