// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SmartViewPQA
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// LoadReportAndExportSetupWindow
        /// </summary>
        public void LoadReportAndExportSetupWindow()
        {
            #region Variable Declarations
            WinMenuBar uIApplicationMenuBar = this.UISmartViewRecipeManagWindow.UIApplicationMenuBar;
            #endregion

            // Click 'Application' menu bar
            Mouse.Click(uIApplicationMenuBar, new Point(356, 45));
        }
        
        /// <summary>
        /// LoadInspectionReportTab
        /// </summary>
        public void LoadInspectionReportTab()
        {
            #region Variable Declarations
            WinTabPage uIInspectionReportsTabPage = this.UISmartViewRecipeManagWindow.UIReportandExportSetupWindow.UIItemWindow.UIItemTabList.UIInspectionReportsTabPage;
            #endregion

            // Click 'Inspection Reports' tab
            Mouse.Click(uIInspectionReportsTabPage, new Point(31, 12));
        }
        
        /// <summary>
        /// AutomaticInspectionSummaryReportPrinting
        /// </summary>
        public void AutomaticInspectionSummaryReportPrinting()
        {
            #region Variable Declarations
            WinClient uIInspectionreportsClient = this.UISmartViewRecipeManagWindow.UIReportandExportSetupWindow.UIItemWindow1.UIInspectionreportsClient;
            WinClient uIInspectionreportsClient1 = this.UISmartViewRecipeManagWindow.UIReportandExportSetupWindow.UIItemWindow2.UIInspectionreportsClient;
            WinClient uIInspectionreportsClient2 = this.UISmartViewRecipeManagWindow.UIReportandExportSetupWindow.UIItemWindow3.UIInspectionreportsClient;
            #endregion

            // Click 'Inspection reports' client
            Mouse.Click(uIInspectionreportsClient, new Point(194, 24));

            // Click 'Inspection reports' client
            Mouse.Click(uIInspectionreportsClient1, new Point(244, 23));

            // Click 'Inspection reports' client
            Mouse.Click(uIInspectionreportsClient2, new Point(69, 28));
        }
        
        /// <summary>
        /// DefineQuery - Use 'DefineQueryParams' to pass parameters into this method.
        /// </summary>
        public void DefineQuery()
        {
            #region Variable Declarations
            WinButton uIDefineQueryButton = this.UISmartViewRecipeManagWindow.UIReportandExportSetupWindow.UIDefineQueryWindow.UIDefineQueryButton;
            WinCheckBox uIApplyqueryCheckBox = this.UIQueryDefinitionInspeWindow.UIApplyqueryWindow.UIApplyqueryCheckBox;
            WinRadioButton uISelectedclassesRadioButton = this.UIQueryDefinitionInspeWindow.UISelectedclassesWindow.UISelectedclassesRadioButton;
            WinListItem uIContinuousBrightListItem = this.UIQueryDefinitionInspeWindow.UIItemWindow.UIContinuousBrightListItem;
            WinMenuItem uIClearAllMenuItem = this.UIItemWindow.UIContextMenu.UIClearAllMenuItem;
            WinList uIItemList = this.UIQueryDefinitionInspeWindow.UIItemWindow.UIItemList;
            WinListItem uIView1ListItem = this.UIQueryDefinitionInspeWindow.UIItemWindow1.UIView1ListItem;
            WinCheckBox uISuppressnullentriesCheckBox = this.UIQueryDefinitionInspeWindow.UISuppressnullentriesWindow.UISuppressnullentriesCheckBox;
            WinListItem uIItem1ListItem = this.UIQueryDefinitionLaneSWindow.UIItemWindow.UIItem1ListItem;
            WinList uIItemList1 = this.UIQueryDefinitionLaneSWindow.UIItemWindow.UIItemList;
            WinRadioButton uISeverityRadioButton = this.UIQueryDefinitionDefecWindow.UISeverityWindow.UISeverityRadioButton;
            WinEdit uIItemEdit = this.UIQueryDefinitionDefecWindow.UIText1Window.UIItemEdit;
            WinRadioButton uIOnlyrepeatingRadioButton = this.UIQueryDefinitionDefecWindow.UIOnlyrepeatingWindow.UIOnlyrepeatingRadioButton;
            WinCheckBox uIItemCheckBox = this.UIQueryDefinitionDefecWindow.UIItemWindow.UIItemCheckBox;
            WinEdit uIItemEdit1 = this.UIQueryDefinitionDefecWindow.UIItem0000000000Window.UIItemEdit;
            WinCheckBox uIItemCheckBox1 = this.UIQueryDefinitionDefecWindow.UIItemWindow1.UIItemCheckBox;
            WinEdit uIItemEdit2 = this.UIQueryDefinitionDefecWindow.UIItem0000000000Window1.UIItemEdit;
            #endregion

            // Click 'Define Query...' button
            Mouse.Click(uIDefineQueryButton, new Point(49, 10));

            // Select 'Apply query' check box
            uIApplyqueryCheckBox.Checked = this.DefineQueryParams.UIApplyqueryCheckBoxChecked;

            // Select 'Selected classes' radio button
            uISelectedclassesRadioButton.Selected = this.DefineQueryParams.UISelectedclassesRadioButtonSelected;

            // Right-Click 'Continuous Bright' list item
            Mouse.Click(uIContinuousBrightListItem, MouseButtons.Right, ModifierKeys.None, new Point(8, 7));

            // Click 'Clear All' menu item
            Mouse.Click(uIClearAllMenuItem, new Point(55, 12));

            // Select 'Continuous Bright+Dark,Continuous Dark,Discrete Extreme Bright,Discrete Extreme Bright+Dark,Discrete Extreme Dark,Low Contrast Bright + Dark,Low Density Bright,Low Density Bright+Dark,Low Density Dark' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.DefineQueryParams.UIItemListSelectedItemsAsString;

            // Click 'View 1' list item
            Mouse.Click(uIView1ListItem, new Point(16, 8));

            // Select 'Suppress null entries' check box
            uISuppressnullentriesCheckBox.Checked = this.DefineQueryParams.UISuppressnullentriesCheckBoxChecked;

            // Right-Click '1' list item
            Mouse.Click(uIItem1ListItem, MouseButtons.Right, ModifierKeys.None, new Point(16, 12));

            // Click 'Clear All' menu item
            Mouse.Click(uIClearAllMenuItem, new Point(33, 8));

            // Select '1,3,4' in 'Unknown Name' list box
            uIItemList1.SelectedItemsAsString = this.DefineQueryParams.UIItemListSelectedItemsAsString1;

            // Select 'Severity >=' radio button
            uISeverityRadioButton.Selected = this.DefineQueryParams.UISeverityRadioButtonSelected;

            // Type '8' in 'Unknown Name' text box
            uIItemEdit.Text = this.DefineQueryParams.UIItemEditText;

            // Select 'Only repeating' radio button
            uIOnlyrepeatingRadioButton.Selected = this.DefineQueryParams.UIOnlyrepeatingRadioButtonSelected;

            // Select 'Unknown Name' check box
            uIItemCheckBox.Checked = this.DefineQueryParams.UIItemCheckBoxChecked;

            // Type '12.98' in 'Unknown Name' text box
            uIItemEdit1.Text = this.DefineQueryParams.UIItemEditText1;

            // Select 'Unknown Name' check box
            uIItemCheckBox1.Checked = this.DefineQueryParams.UIItemCheckBoxChecked1;

            // Type '76.90' in 'Unknown Name' text box
            uIItemEdit2.Text = this.DefineQueryParams.UIItemEditText2;
        }
        
        #region Properties
        public virtual DefineQueryParams DefineQueryParams
        {
            get
            {
                if ((this.mDefineQueryParams == null))
                {
                    this.mDefineQueryParams = new DefineQueryParams();
                }
                return this.mDefineQueryParams;
            }
        }
        
        public UISmartViewRecipeManagWindow UISmartViewRecipeManagWindow
        {
            get
            {
                if ((this.mUISmartViewRecipeManagWindow == null))
                {
                    this.mUISmartViewRecipeManagWindow = new UISmartViewRecipeManagWindow();
                }
                return this.mUISmartViewRecipeManagWindow;
            }
        }
        
        public UIQueryDefinitionInspeWindow UIQueryDefinitionInspeWindow
        {
            get
            {
                if ((this.mUIQueryDefinitionInspeWindow == null))
                {
                    this.mUIQueryDefinitionInspeWindow = new UIQueryDefinitionInspeWindow();
                }
                return this.mUIQueryDefinitionInspeWindow;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIQueryDefinitionLaneSWindow UIQueryDefinitionLaneSWindow
        {
            get
            {
                if ((this.mUIQueryDefinitionLaneSWindow == null))
                {
                    this.mUIQueryDefinitionLaneSWindow = new UIQueryDefinitionLaneSWindow();
                }
                return this.mUIQueryDefinitionLaneSWindow;
            }
        }
        
        public UIQueryDefinitionDefecWindow UIQueryDefinitionDefecWindow
        {
            get
            {
                if ((this.mUIQueryDefinitionDefecWindow == null))
                {
                    this.mUIQueryDefinitionDefecWindow = new UIQueryDefinitionDefecWindow();
                }
                return this.mUIQueryDefinitionDefecWindow;
            }
        }
        #endregion
        
        #region Fields
        private DefineQueryParams mDefineQueryParams;
        
        private UISmartViewRecipeManagWindow mUISmartViewRecipeManagWindow;
        
        private UIQueryDefinitionInspeWindow mUIQueryDefinitionInspeWindow;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UIQueryDefinitionLaneSWindow mUIQueryDefinitionLaneSWindow;
        
        private UIQueryDefinitionDefecWindow mUIQueryDefinitionDefecWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DefineQuery'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class DefineQueryParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Apply query' check box
        /// </summary>
        public bool UIApplyqueryCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Selected classes' radio button
        /// </summary>
        public bool UISelectedclassesRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Continuous Bright+Dark,Continuous Dark,Discrete Extreme Bright,Discrete Extreme Bright+Dark,Discrete Extreme Dark,Low Contrast Bright + Dark,Low Density Bright,Low Density Bright+Dark,Low Density Dark' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "Continuous Bright+Dark,Continuous Dark,Discrete Extreme Bright,Discrete Extreme B" +
            "right+Dark,Discrete Extreme Dark,Low Contrast Bright + Dark,Low Density Bright,L" +
            "ow Density Bright+Dark,Low Density Dark";
        
        /// <summary>
        /// Select 'Suppress null entries' check box
        /// </summary>
        public bool UISuppressnullentriesCheckBoxChecked = true;
        
        /// <summary>
        /// Select '1,3,4' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString1 = "1,3,4";
        
        /// <summary>
        /// Select 'Severity >=' radio button
        /// </summary>
        public bool UISeverityRadioButtonSelected = true;
        
        /// <summary>
        /// Type '8' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "8";
        
        /// <summary>
        /// Select 'Only repeating' radio button
        /// </summary>
        public bool UIOnlyrepeatingRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Unknown Name' check box
        /// </summary>
        public bool UIItemCheckBoxChecked = true;
        
        /// <summary>
        /// Type '12.98' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "12.98";
        
        /// <summary>
        /// Select 'Unknown Name' check box
        /// </summary>
        public bool UIItemCheckBoxChecked1 = true;
        
        /// <summary>
        /// Type '76.90' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "76.90";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISmartViewRecipeManagWindow : WinWindow
    {
        
        public UISmartViewRecipeManagWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SmartView Recipe Manager - test";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIApplicationMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
                    this.mUIApplicationMenuBar.WindowTitles.Add("SmartView Recipe Manager - test");
                    #endregion
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public UIReportandExportSetupWindow UIReportandExportSetupWindow
        {
            get
            {
                if ((this.mUIReportandExportSetupWindow == null))
                {
                    this.mUIReportandExportSetupWindow = new UIReportandExportSetupWindow(this);
                }
                return this.mUIReportandExportSetupWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIApplicationMenuBar;
        
        private UIReportandExportSetupWindow mUIReportandExportSetupWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIReportandExportSetupWindow : WinWindow
    {
        
        public UIReportandExportSetupWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32768";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIDefineQueryWindow UIDefineQueryWindow
        {
            get
            {
                if ((this.mUIDefineQueryWindow == null))
                {
                    this.mUIDefineQueryWindow = new UIDefineQueryWindow(this);
                }
                return this.mUIDefineQueryWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIDefineQueryWindow mUIDefineQueryWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TabStripWndClass";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTabList : WinTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIInspectionReportsTabPage
        {
            get
            {
                if ((this.mUIInspectionReportsTabPage == null))
                {
                    this.mUIInspectionReportsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIInspectionReportsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Inspection Reports";
                    this.mUIInspectionReportsTabPage.WindowTitles.Add("SmartView Recipe Manager - test");
                    #endregion
                }
                return this.mUIInspectionReportsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIInspectionReportsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSFlexGridWndClass";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public WinClient UIInspectionreportsClient
        {
            get
            {
                if ((this.mUIInspectionreportsClient == null))
                {
                    this.mUIInspectionreportsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInspectionreportsClient.WindowTitles.Add("SmartView Recipe Manager - test");
                    #endregion
                }
                return this.mUIInspectionreportsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIInspectionreportsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSFlexGridWndClass";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public WinClient UIInspectionreportsClient
        {
            get
            {
                if ((this.mUIInspectionreportsClient == null))
                {
                    this.mUIInspectionreportsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInspectionreportsClient.WindowTitles.Add("SmartView Recipe Manager - test");
                    #endregion
                }
                return this.mUIInspectionreportsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIInspectionreportsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSFlexGridWndClass";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public WinClient UIInspectionreportsClient
        {
            get
            {
                if ((this.mUIInspectionreportsClient == null))
                {
                    this.mUIInspectionreportsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInspectionreportsClient.WindowTitles.Add("SmartView Recipe Manager - test");
                    #endregion
                }
                return this.mUIInspectionreportsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIInspectionreportsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefineQueryWindow : WinWindow
    {
        
        public UIDefineQueryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "18";
            this.WindowTitles.Add("SmartView Recipe Manager - test");
            #endregion
        }
        
        #region Properties
        public WinButton UIDefineQueryButton
        {
            get
            {
                if ((this.mUIDefineQueryButton == null))
                {
                    this.mUIDefineQueryButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDefineQueryButton.SearchProperties[WinButton.PropertyNames.Name] = "Define Query...";
                    this.mUIDefineQueryButton.WindowTitles.Add("SmartView Recipe Manager - test");
                    #endregion
                }
                return this.mUIDefineQueryButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDefineQueryButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQueryDefinitionInspeWindow : WinWindow
    {
        
        public UIQueryDefinitionInspeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Query Definition - Inspection Summary";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Query Definition - Inspection Summary");
            #endregion
        }
        
        #region Properties
        public UIApplyqueryWindow UIApplyqueryWindow
        {
            get
            {
                if ((this.mUIApplyqueryWindow == null))
                {
                    this.mUIApplyqueryWindow = new UIApplyqueryWindow(this);
                }
                return this.mUIApplyqueryWindow;
            }
        }
        
        public UISelectedclassesWindow UISelectedclassesWindow
        {
            get
            {
                if ((this.mUISelectedclassesWindow == null))
                {
                    this.mUISelectedclassesWindow = new UISelectedclassesWindow(this);
                }
                return this.mUISelectedclassesWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISuppressnullentriesWindow UISuppressnullentriesWindow
        {
            get
            {
                if ((this.mUISuppressnullentriesWindow == null))
                {
                    this.mUISuppressnullentriesWindow = new UISuppressnullentriesWindow(this);
                }
                return this.mUISuppressnullentriesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIApplyqueryWindow mUIApplyqueryWindow;
        
        private UISelectedclassesWindow mUISelectedclassesWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UISuppressnullentriesWindow mUISuppressnullentriesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIApplyqueryWindow : WinWindow
    {
        
        public UIApplyqueryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "29";
            this.WindowTitles.Add("Query Definition - Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIApplyqueryCheckBox
        {
            get
            {
                if ((this.mUIApplyqueryCheckBox == null))
                {
                    this.mUIApplyqueryCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIApplyqueryCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply query";
                    this.mUIApplyqueryCheckBox.WindowTitles.Add("Query Definition - Inspection Summary");
                    #endregion
                }
                return this.mUIApplyqueryCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIApplyqueryCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectedclassesWindow : WinWindow
    {
        
        public UISelectedclassesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "24";
            this.WindowTitles.Add("Query Definition - Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UISelectedclassesRadioButton
        {
            get
            {
                if ((this.mUISelectedclassesRadioButton == null))
                {
                    this.mUISelectedclassesRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISelectedclassesRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Selected classes";
                    this.mUISelectedclassesRadioButton.WindowTitles.Add("Query Definition - Inspection Summary");
                    #endregion
                }
                return this.mUISelectedclassesRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUISelectedclassesRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "27";
            this.WindowTitles.Add("Query Definition - Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinListItem UIContinuousBrightListItem
        {
            get
            {
                if ((this.mUIContinuousBrightListItem == null))
                {
                    this.mUIContinuousBrightListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIContinuousBrightListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Continuous Bright";
                    this.mUIContinuousBrightListItem.WindowTitles.Add("Query Definition - Inspection Summary");
                    #endregion
                }
                return this.mUIContinuousBrightListItem;
            }
        }
        
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("Query Definition - Inspection Summary");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIContinuousBrightListItem;
        
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "16";
            this.WindowTitles.Add("Query Definition - Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinListItem UIView1ListItem
        {
            get
            {
                if ((this.mUIView1ListItem == null))
                {
                    this.mUIView1ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIView1ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "View 1";
                    this.mUIView1ListItem.WindowTitles.Add("Query Definition - Inspection Summary");
                    #endregion
                }
                return this.mUIView1ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIView1ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISuppressnullentriesWindow : WinWindow
    {
        
        public UISuppressnullentriesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Query Definition - Inspection Summary");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UISuppressnullentriesCheckBox
        {
            get
            {
                if ((this.mUISuppressnullentriesCheckBox == null))
                {
                    this.mUISuppressnullentriesCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISuppressnullentriesCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Suppress null entries";
                    this.mUISuppressnullentriesCheckBox.WindowTitles.Add("Query Definition - Inspection Summary");
                    #endregion
                }
                return this.mUISuppressnullentriesCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUISuppressnullentriesCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIClearAllMenuItem
        {
            get
            {
                if ((this.mUIClearAllMenuItem == null))
                {
                    this.mUIClearAllMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIClearAllMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Clear All";
                    #endregion
                }
                return this.mUIClearAllMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIClearAllMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQueryDefinitionLaneSWindow : WinWindow
    {
        
        public UIQueryDefinitionLaneSWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Query Definition - Lane Summary";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Query Definition - Lane Summary");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "18";
            this.WindowTitles.Add("Query Definition - Lane Summary");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItem1ListItem
        {
            get
            {
                if ((this.mUIItem1ListItem == null))
                {
                    this.mUIItem1ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItem1ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "1";
                    this.mUIItem1ListItem.WindowTitles.Add("Query Definition - Lane Summary");
                    #endregion
                }
                return this.mUIItem1ListItem;
            }
        }
        
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("Query Definition - Lane Summary");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItem1ListItem;
        
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQueryDefinitionDefecWindow : WinWindow
    {
        
        public UIQueryDefinitionDefecWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Query Definition - Defect Details";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public UISeverityWindow UISeverityWindow
        {
            get
            {
                if ((this.mUISeverityWindow == null))
                {
                    this.mUISeverityWindow = new UISeverityWindow(this);
                }
                return this.mUISeverityWindow;
            }
        }
        
        public UIText1Window UIText1Window
        {
            get
            {
                if ((this.mUIText1Window == null))
                {
                    this.mUIText1Window = new UIText1Window(this);
                }
                return this.mUIText1Window;
            }
        }
        
        public UIOnlyrepeatingWindow UIOnlyrepeatingWindow
        {
            get
            {
                if ((this.mUIOnlyrepeatingWindow == null))
                {
                    this.mUIOnlyrepeatingWindow = new UIOnlyrepeatingWindow(this);
                }
                return this.mUIOnlyrepeatingWindow;
            }
        }
        
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem0000000000Window UIItem0000000000Window
        {
            get
            {
                if ((this.mUIItem0000000000Window == null))
                {
                    this.mUIItem0000000000Window = new UIItem0000000000Window(this);
                }
                return this.mUIItem0000000000Window;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItem0000000000Window1 UIItem0000000000Window1
        {
            get
            {
                if ((this.mUIItem0000000000Window1 == null))
                {
                    this.mUIItem0000000000Window1 = new UIItem0000000000Window1(this);
                }
                return this.mUIItem0000000000Window1;
            }
        }
        #endregion
        
        #region Fields
        private UISeverityWindow mUISeverityWindow;
        
        private UIText1Window mUIText1Window;
        
        private UIOnlyrepeatingWindow mUIOnlyrepeatingWindow;
        
        private UIItemWindow7 mUIItemWindow;
        
        private UIItem0000000000Window mUIItem0000000000Window;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItem0000000000Window1 mUIItem0000000000Window1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISeverityWindow : WinWindow
    {
        
        public UISeverityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "25";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UISeverityRadioButton
        {
            get
            {
                if ((this.mUISeverityRadioButton == null))
                {
                    this.mUISeverityRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISeverityRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Severity >=";
                    this.mUISeverityRadioButton.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUISeverityRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUISeverityRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIText1Window : WinWindow
    {
        
        public UIText1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "22";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOnlyrepeatingWindow : WinWindow
    {
        
        public UIOnlyrepeatingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "23";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIOnlyrepeatingRadioButton
        {
            get
            {
                if ((this.mUIOnlyrepeatingRadioButton == null))
                {
                    this.mUIOnlyrepeatingRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIOnlyrepeatingRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Only repeating";
                    this.mUIOnlyrepeatingRadioButton.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUIOnlyrepeatingRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIOnlyrepeatingRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "14";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIItemCheckBox.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIItemCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem0000000000Window : WinWindow
    {
        
        public UIItem0000000000Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "13";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIItemCheckBox.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIItemCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem0000000000Window1 : WinWindow
    {
        
        public UIItem0000000000Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "11";
            this.WindowTitles.Add("Query Definition - Defect Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Query Definition - Defect Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
}
